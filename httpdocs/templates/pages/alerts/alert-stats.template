{#
    (C) 2021 - ntop.org    
    Base template for the alert tables.
#}

<link rel="stylesheet" href='{{ ntop.getHttpPrefix() }}/css/apexcharts.css'/>

<script type='text/javascript' src='{{ ntop.getHttpPrefix() }}/js/apexchart/apexcharts.min.js?{{ ntop.getStaticFileEpoch() }}'></script>
<script type='text/javascript' src='{{ ntop.getHttpPrefix() }}/js/widgets/widgets.js?{{ ntop.getStaticFileEpoch() }}'></script>


<div class="container px-1">
    <div class="row gx-5">
        <div class="col">
            <div class="card card mb-3 mt-2 w-80 h-60 border-success">
            <div class="card-header bg-success text-center text-dark fs-5 fw-bold">Top alerts</div>
            <div class="card-body">
                <p class="card-text text-center fs-5" id="totalAlerts">Loading...</p>
            </div>
            </div>
        </div>

        <div class="col">
            <div class="card card mb-3 mt-2 w-80 h-60 border-primary">
            <div class="card-header bg-primary text-center text-dark fs-5 fw-bold">Top alert type</div>
            <div class="card-body">
                <p class="card-text text-center fs-5" id="topAlertType">Loading...</p>
            </div>
            </div>
        </div>

        <div class="col">
            <div class="card card mb-3 mt-2 w-80 h-60 border-danger ">
            <div class="card-header bg-danger text-center text-dark fs-5 fw-bold data-bs-custom-class="custom-tooltip" data-bs-toggle="tooltip" data-bs-html="true" title="Victim host with most alert, if any">Top victim</div>
            <div class="card-body">
                <p class="card-text text-center fs-5" id="topVictim">Loading...</p>
            </div>
            </div>
        </div>

        <div class="col">
            <div class="card card mb-3 mt-2 w-80 h-60 border-info ">
            <div class="card-header bg-info text-center text-dark fs-5 fw-bold data-bs-custom-class="custom-tooltip" data-bs-toggle="tooltip" data-bs-html="true" title="Attacker host with most alert, if any">Top attacker</div>
            <div class="card-body">
                <p class="card-text text-center fs-5" id="topAttacker">Loading...</p>
            </div>
            </div>
        </div>

    </div>

</div>



    <div class='col-12'>
        <div class="mb-2">
            {* ui_utils.render_datetime_range_picker(range_picker) *}
        </div>
    </div>
    <div class='col-12'>
        <div class="card card-shadow">
	        <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                          <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="card-body p-2">
                {* widget_gui_utils.render_chart(chart.name, {
                    displaying_label = ""
                }) *}
               <table id='{{ datatable.name }}' class='table table-striped table-bordered w-100'> 
                    <thead>
                       {* datatable.table *}
                    </thead>
                </table>
            </div>
            <div class="card-footer">
                <button id="btn-get-permalink" class="btn btn-secondary">
                    <i class="fas fa-link"></i> {{ i18n('graphs.get_permanent_link') }}
                </button>
                <a id="btn-download-alerts" download="alerts.txt" class="btn btn-secondary" href="{{ ntop.getHttpPrefix() }}/lua/rest/v1/get/{{ alert_stats.entity }}/alert/list.lua{{ build_query_params(datatable.datasource.params) }}&format=txt">
                    <i class="fas fa-file-download"></i> {{ i18n('show_alerts.download_alerts') }}
                </a>
		<button id="btn-delete-alerts" {{ ternary(datatable.show_delete, "", 'hidden="hidden"') }} data-bs-target='#delete-alerts-modal' data-bs-toggle="modal" class="btn btn-danger">
                    <i class="fas fa fa-trash"></i> {{ i18n("delete_alerts")}}
                </button>

            </div>
        </div>
    </div>
</div>
<style>
    table.dataTable td, table.dataTable th {
        padding: 0.55rem;
    }
</style>

{# add modals if defined #}
{% if datatable.modals then %}
<div class="modals">
    {% for _, modal in pairs(datatable.modals) do %}
        {* modal *}
    {% end %}
</div>
{% end %}

{* template_utils.gen("pages/modals/alerts/filters/add.template", filters) *}

<link href="{{ ntop.getHttpPrefix() }}/css/dataTables.bootstrap5.min.css" rel="stylesheet"/>
<script type="text/javascript">
    i18n.showing_x_to_y_rows = "{{ i18n('showing_x_to_y_rows', {x='_START_', y='_END_', tot='_TOTAL_'}) }}";
</script>
<script type='text/javascript'>
    let alertStats = {};
    let pageCsrf = "{{ ntop.getRandomCSRFValue() }}";

    $(document).ready(function(){
        const INITIAL_ROWS_LENGTH = {{datatable.initialLength}};
        const FAMILY = "{{ alert_stats.entity }}"
        const PAGE_CSRF = "{{ ntop.getRandomCSRFValue() }}";
        
        const datasourceParams = {* json.encode(datatable.datasource.params) *};

        const $inputBeginEpoch = $(`#begin-epoch`);
        const $inputEndEpoch = $(`#end-epoch`);
        const $btnGetPermaLink = $(`#btn-get-permalink`);

	/* Show an overlay to hide loading */
        function toggleOverlays(time = 500) {
            $(`.overlay`).toggle(time);
        }

        function showOverlays(time = 500) {
            $(`.overlay`).fadeIn(time);
        }

        function hideOverlays(time = 500) {
            $(`.overlay`).fadeOut(time);
        }

        function updateDatasourceParams() {

            const [begin, end] = getTimestampRange();
            if (begin == null && end == null) return datasourceParams;

            // override the existing timestamps 
            if (datasourceParams.epoch_begin) datasourceParams.epoch_begin = begin.unix();
            if (datasourceParams.epoch_end) datasourceParams.epoch_end = end.unix();

            return datasourceParams;
        }

        async function reloadTable($table, ) {
            const searchParams = new URLSearchParams(Object.entries(datasourceParams));
	        toggleOverlays();
	    
            // reload the table
            $table.ajax.url(`{* datatable.datasource.name *}?${searchParams.toString()}`).load();
            try {
                WidgetUtils.getWidgetByName("{{ chart.name }}").update(datasourceParams);
            }
            catch(e) {
                console.warn(e);
            }
        }

        function printQueryTime($table) {
            const response = $table.ajax.json();
            // if the response contains the query time period
            if (response.rsp.stats !== undefined) {
                const msec = response.rsp.stats.query_duration_msec / 1000.0;
                $(`#{{ datatable.name }}-query`).show();
                $(`#{{ datatable.name }}-query .seconds`).text((msec < 0.001) ? '< 0.001' : msec); // The time is in msec
            }
        }

        function getTimestampRange() {
            const begin = $(`#begin-epoch`).datetimepicker('date').utc();
            const end = $(`#end-epoch`).datetimepicker('date').utc();
            return [begin, end];
        }

        function pushNewHistoryState(begin, end, len) {
            
            const url = new URL(location);
            const searchParams = new URLSearchParams();

            searchParams.set('epoch_begin', begin.unix());
            searchParams.set('epoch_end', end.unix());
            
            if (url.searchParams.has('status')) {
                searchParams.set('status', url.searchParams.get('status'));
            }

	    /*
	      Update navbar items, e.g., alert entities, with begin/end epochs and status to preserve them when
	      switching between tabs
	     */
	    $('#navbarNav a').each(function(index, element) {
		/* Read the current href */
		const cur_href = $(element).attr('href');
		let cur_url = new URL(cur_href, location.origin);
		/* Read current href params and extract the page name */
		const cur_page = cur_url.searchParams.get('page');
		if(cur_page) {
		    /* Prepare the new URL which is the page name extracted plus all other params */
		    searchParams.set('page', cur_page);
		    cur_url.search = searchParams.toString();
		    /* Attach the new URL to the current href */
		    $(element).attr('href', cur_url.toString());
		}
	    });

	    /*
	      Other page params are not preserved when switching tabs as they may be not valid across
	      multiple entities
	     */
	    searchParams.delete('page');
            if (url.searchParams.has('page')) {
                searchParams.set('page', url.searchParams.get('page'));
            }

            // get all filters tags
            const tags = tagify.getTagElms();

            // add the tag filters inside the search params object
            for (const tag of tags) {
                const tagData = tagify.tagData(tag);
                const {key, selectedOperator, realValue, value} = tagData;
                searchParams.set(key, `${realValue || value},${selectedOperator}`);
            }

            url.search = searchParams.toString();
            window.history.pushState({epoch_begin: begin.unix(), epoch_end: end.unix()}, '', url);
        }

        async function onRangePickerChange(pushHistroy = false) {

            const [begin, end] = getTimestampRange();
	    updateDatasourceParams();
            await reloadTable($table);

            // update the link of the download button
            const href = $(`#btn-download-records`).attr('href');
            const newDownloadURL = new URL(href, location.origin);
            newDownloadURL.search = new URLSearchParams(datasourceParams); 
            $(`#btn-download-records`).attr('href', newDownloadURL.toString());

            if (pushHistroy) {
                pushNewHistoryState(begin, end);
            }
        }

        async function addFilterTag(tag) {
            // does the tag exist?
            const existingTagElement = tagify.getTagElms().find(htmlTag => htmlTag.getAttribute('key') === tag.key);
            const existingTag = tagify.tagData(existingTagElement);

            if (existingTag !== undefined && existingTag.realValue !== tag.realValue) {
                
                // replace the tag!
                existingTag.value = tag.value;
                existingTag.realValue = tag.realValue;

                tagify.replaceTag(existingTagElement, existingTag);
                // update the datasource params
                datasourceParams[tag.key] = `${tag.realValue},${existingTag.selectedOperator}`;
                await onRangePickerChange(true);

                return;
            } 

            // has the tag an operator object?
            if (!Array.isArray(DEFINED_TAGS[tag.key])) {
                tag.operators = DEFINED_TAGS[tag.key].operators;
            }

            tag.selectedOperator = 'eq';

            // add filter!
            tagify.addTags([tag]);
        }

        function loadColumns() {

            let columns = [];
            {% if datatable.js_columns then %}
                columns = {* datatable.js_columns *};
            {% end %}

            /* Actions Column */
	    {% if alert_stats.entity ~= 'all' then %}
            columns.push({responsivePriority: 1, width: '5%', targets: -1, className: 'text-center text-nowrap', orderable: false, data: null, render: (_, type, dataRow) => {
	        const buttons = [
		    /* Bell button to disable alerts is only supported for hosts and flows */
		    {% if alert_stats.entity == 'host' or alert_stats.entity == 'flow' then %}
		    {icon: 'fa-bell-slash', label: "{{ i18n('disable') }}", modal: '#alerts_filter_dialog', class: "btn-warning {{ ((alert_stats.entity == 'host' or alert_stats.entity == 'flow') and '' or 'disabled') }}"},
		    {% end %}

		    /* Only not-engaged alerts can be deleted */
                    {% if alert_stats.entity ~= 'all' and alert_stats.status ~= "engaged" and datatable.show_delete == true then %}
                    {icon: 'fa fa-trash', label: "{{ i18n('remove') }}", modal: '#delete_alert_dialog', class: 'btn-danger'},
                    {% end %}
		];

                return DataTableUtils.createActionButtons(buttons);
            }});
	    {% end %}

            return columns;
        }

        const datatableButton = {* (datatable.buttons or '[]') *};
        datatableButton.push({
            text: '<i class="fas fa-sync"></i>',
            action: async function (e, dt, node, config) {
                await onRangePickerChange();
            }
        });

        let config = DataTableUtils.getStdDatatableConfig(datatableButton);
        config = DataTableUtils.extendConfig(config, {
	    serverSide: true,
            searching: false,
            ajax: {
                method: 'get',
                url: '{* datatable.datasource.endpoint *}',
                dataSrc: 'rsp.records',
                data: (data, settings) => {

                    const tableApi = settings.oInstance.api();
                    const orderColumnIndex = data.order[0].column;
                    const orderColumnName = tableApi.column(orderColumnIndex).name() || undefined;
                    
                    if (data.order) {
                        data.order = data.order[0].dir;
                        data.sort = orderColumnName;
                    }

                    delete data.columns;
                    delete data.search;
                   
                    // create visibleColumns field
                    const visibleColumns = [];
                    tableApi.columns().every(function(idx) {
                        
                        const $column = tableApi.column(idx);
                        if ($column.visible() && $column.name() !== '') {
                            visibleColumns.push($column.name());
                        } 
                    });

                    data.visible_columns = visibleColumns.join(',');

                    return data;
                }
            },
            lengthMenu: [10, 20, 50, 100, 200],
	    pageLength: INITIAL_ROWS_LENGTH,
            columns: loadColumns()
        });

        const $table = $(`#{{ datatable.name }}`).DataTable(config);
        DataTableUtils.addToggleColumnsDropdown($table, function(col, visible) {
            $table.ajax.reload();
        });

        // on ajax request complete then print the query time
        $table.on('xhr', function() {
            printQueryTime($table);
            hideOverlays();
            filterModalLoadData();
	});

	$(`.range-picker`).on('change', async function(e) {
            await onRangePickerChange(true);
        });

        // when an user remove the tag
        tagify.on('remove', async function(e) {

            const key = e.detail.data.key;
            if (key === undefined) {
                return;
            }

            if (datasourceParams[key] !== undefined) {
                delete datasourceParams[key];
            }

            await onRangePickerChange(true);
        });

        tagify.on('add', async function(e) {

            const detail = e.detail;
            if (detail.data === undefined) { return; }

            // let's check if the tag has a key field
            if (!detail.data.key) {
                tagify.removeTags([e.detail.tag]);
                e.preventDefault();
                e.stopPropagation();
                return;
            }

            const tag = detail.data;
            // add/update datasource params, default operator `=`
            datasourceParams[tag.key] = `${tag.realValue || tag.value},eq`;
            // trigger request
            await onRangePickerChange(true);
        });

        // Tag 'click' event handler to open the 'Edit' modal. Note: this prevents
        // inline editing of the tag ('edit:updated' is never called as a consequence)
        tagify.on('click', async function(e) {
            const detail = e.detail;
            if (detail.data === undefined) { return; }
            if (detail.data.key === undefined) {return;}

            const tag = detail.data;

            alertStats.filterModalShow(true);

            $('#alert-filter-type-select').val(tag.key).change();

            let value_select = $('#add-alert-filter-modal select[name="value"]');
            let value_input = $('#add-alert-filter-modal input[name="value"]').val(tag.value);

            if (value_select) {
                value_select.val(tag.realValue || tag.value);
            } else if (value_input) {
                value_input.val(tag.realValue || tag.value);
            }
        });

        tagify.on('edit:updated', async function(e) {
            const detail = e.detail;
            if (detail.data === undefined) { return; }
            if (detail.data.key === undefined) {return;}

            const tag = detail.data;
            const prevTag = detail.previousData;

            tag.realValue = tag.value;

            // add/update datasource params, default operator `=`
            datasourceParams[tag.key] = `${tag.value},${prevTag.selectedOperator}`;

            // trigger request
            await onRangePickerChange(true);
        });

        $(`tags`).on('change', 'select.operator', async function(e) {
            
            // update the tag and the operator
            const $tag = $(this).parents('tag');
            const tagData = tagify.tagData($tag[0]);
            const selectedOperator = $(this).val();

            $tag.attr("selectedoperator", selectedOperator);

            datasourceParams[$tag.attr('key')] = `${tagData.realValue || tagData.value},${selectedOperator}`;
            tagData.selectedOperator = selectedOperator;

            // trigger request
            await onRangePickerChange(true);
        });

	    // clear all the filters on click
        $(".btn-remove-tags").on('click', async function() {

            const tags = tagify.getTagElms();
            for (const tag of tags) {
                const key = tag.getAttribute('key');
                if (datasourceParams[key]) {
                    delete datasourceParams[key];
                }
            }

            tagify.removeAllTags();

            await onRangePickerChange(true);
        });

        $table.on('click', `a.tag-filter`, async function (e) {
            e.preventDefault();

            // Getting the row data
            const key = $(this).data('tagKey');
            const label = $(this).data('tagLabel');
            const value = $(this).data('tagValue');
            const tagTitle = i18n.tags[key];
            
            const tag = { label: tagTitle, key: key, value: label, realValue: value };

            addFilterTag(tag);
        });
    
        // when the user navigates using the browser's arrows
        // set the input boxes with their respective values
        $(window).on('popstate', function(e) {
            const {state} = e.originalEvent;
            const {epoch_begin, epoch_end} = state;    
            $inputBeginEpoch.datetimepicker('date', moment(epoch_begin, 'X'));
            $inputEndEpoch.datetimepicker('date', moment(epoch_end, 'X'));
        });

        $btnGetPermaLink.on('click', function() {

            const $this = $(this);
            
            const dummyInput = document.createElement('input');
            dummyInput.value = location.href;
            document.body.appendChild(dummyInput);
            dummyInput.select();

            // copy the url to the clipboard from the dummy input
            document.execCommand("copy");
            document.body.removeChild(dummyInput);

            $this.attr("title", "Copied!")
                .tooltip("dispose")
                .tooltip()
                .tooltip("show");
        });

        ChartWidget.registerEventCallback("{{ chart.name }}", 'zoomed', async (chartContext, { xaxis, yaxis }) => {
           
            // the timestamps are in milliseconds, convert them into seconds
            const begin = moment(xaxis.min);
            const end = moment(xaxis.max);

	    $(`#select-presets`).val('custom');

            $inputBeginEpoch.datetimepicker('date', begin);
            $inputEndEpoch.datetimepicker('date', end);

            await onRangePickerChange(true);
        });

	$table.on('click', `a[href='#delete_alert_dialog']`, function (e) {
            const alert = $table.row($(this).parent().parent()).data();
            $deleteAlertModal.invokeModalInit(alert);
        });

        const $deleteAlertModal = $('#delete_alert_dialog form').modalHandler({
            method: 'post',
            csrf: PAGE_CSRF,
            endpoint: `${http_prefix}/lua/rest/v1/delete/{{ alert_stats.entity }}/alerts.lua`,
            beforeSumbit: function (alert) {
                return { ifid: "{{ ifid }}", row_id: alert.row_id };
            },
            onModalInit: function (alert) {
                $(`#delete_alert_dialog button[type='submit']`).removeAttr("disabled");
            },
            onSubmitSuccess: function (response) {

                if (response.rc < 0) {
                    $('#delete_alert_dialog .invalid-feedback').html(i18n.rest[response.rc_str]).show();
                }
                else {
                    onRangePickerChange(false);
                }

                return (response.rc == 0);
            }
        });

	    $(`#btn-delete-alerts`).on('click', function (e) {
            $deleteFilteredAlerts.invokeModalInit();
        });
	
	    const $deleteFilteredAlerts = $('#delete-alerts-modal form').modalHandler({
            method: 'post',
            csrf: PAGE_CSRF,
            endpoint: `${http_prefix}/lua/rest/v1/delete/{{ alert_stats.entity }}/alerts.lua`,
            beforeSumbit: function (alert) {
	    	let post_params = {};
		for (let key in datasourceParams) {
		    post_params[key] = (datasourceParams[key]);
		}
	    	return post_params;
            },
            onModalInit: function () {

                $('#delete-alerts-modal .filters-list').empty();
                const tags = tagify.getTagElms();

                const beginEpoch = moment(parseInt(datasourceParams["epoch_begin"]), 'X').format("DD/MM/YYYY HH:mm:ss");
                const endEpoch = moment(parseInt(datasourceParams["epoch_end"]), 'X').format("DD/MM/YYYY HH:mm:ss");

                const sortedTags = tags.sort((a, b) => {
                    return i18n.tags[tagify.tagData(a).key].localeCompare(i18n.tags[tagify.tagData(b).key])
                });

                $('#delete-alerts-modal #end-epoch-delete').val(endEpoch);
                $('#delete-alerts-modal #begin-epoch-delete').val(beginEpoch);

                for (const tag of sortedTags) {
                    const { key, selectedOperator, realValue, value } = tagify.tagData(tag);
                    const label = i18n.tags[key]
                    const child = $('<div class="form-group row"><div class="col-sm-6"><label class="col-form-label"><b>'+label+'</b></label></div><div class="col-sm-6"><input type="text" value="'+value+'" disabled/></div></div>');

                    $('#delete-alerts-modal .filters-list').append(child);
                }
            },
            onSubmitSuccess: function (response) {
                reloadTable($table);
		return (response.rc == 0);
            }
        });


        $table.on('click', `a[href='#alerts_filter_dialog']`, function (e) {
            const alert = $table.row($(this).parent().parent()).data();
            $disableAlert.invokeModalInit(alert);
        });

        const $disableAlert = $('#alerts_filter_dialog form').modalHandler({
            method: 'post',
            csrf: PAGE_CSRF,
            endpoint: `${http_prefix}/lua/rest/v1/edit/user_script/filter.lua`,
            beforeSumbit: function (alert) {

                const data = {
                    alert_key: alert.alert_id.value,
                    subdir: FAMILY,
		    script_key: alert.script_key,
                    delete_alerts: $(`#delete_alerts_switch`).is(":checked"),
		    alert_addr: $(`[name='alert_addr']:checked`).val(),
                };

                return data;
            },
            onModalInit: function (alert) {

                const $type = $(`<span>${alert.alert_id.label}</span>`);
                $(`#alerts_filter_dialog .alert_label`).text($type.text().trim());

                if (FAMILY === "host") {
                    const label = (alert.ip.label) ? `${alert.ip.label} (${alert.ip.value})` : alert.ip.value; 
		    $(`#srv_addr`).text(label);
                    $(`#srv_radio`).val(alert.ip.value);
		    $(`#cli_radio`).parent().hide();
                }
                else if (FAMILY === "flow") {

                    const cliLabel = (alert.flow.cli_ip.label) ? `${alert.flow.cli_ip.label} (${alert.flow.cli_ip.value})` : alert.flow.cli_ip.value;
                    const srvLabel = (alert.flow.srv_ip.label) ? `${alert.flow.srv_ip.label} (${alert.flow.srv_ip.value})` : alert.flow.srv_ip.value;

                    $(`#cli_addr`).text(cliLabel);
                    $(`#cli_radio`).val(alert.flow.cli_ip.value);
                    $(`#srv_addr`).text(srvLabel);
                    $(`#srv_radio`).val(alert.flow.srv_ip.value);
                }
                else {
                    $(`.alert_entity_val`).text("Unexpected alert family")
                }

            },
            onSubmitSuccess: function (response, dataSent) {

                if (response.rc < 0) {
                    $('#alerts_filter_dialog .invalid-feedback').html(i18n.rest[response.rc_str] || response.rc_str).show();
                }
                else {

                    if (dataSent.delete_alerts) {
                        location.reload();
                    }
                    else {
                        onRangePickerChange(false);
                    }
                }

                return (response.rc == 0);
            }
        });

        /**
         * Release Button Handler
        $table.on('click', `a[href='#release_single_alert']`, function (e) {
            const alert = $table.row($(this).parent().parent()).data();
        });

        const $releaseAlertModal = $('#release_single_alert form').modalHandler({
            method: 'post',
            csrf: PAGE_CSRF,
            endpoint: `${http_prefix}/lua/rest/v1/release/{{ alert_stats.entity }}/alerts.lua`,
            beforeSumbit: function (alert) {
                return {
                    ifid: "{{ ifid }}",
                    row_id: alert.row_id
                };
            },
            onModalInit: function (alert) {
                $(`#release_single_alert button[type='submit']`).removeAttr("disabled");
            },
            onSubmitSuccess: function (response) {

                if (response.rc < 0) {
                    $('#release_single_alert .invalid-feedback').html(i18n.rest[response.rc_str]).show();
                }
                else {
                    onRangePickerChange(false);
                }

                return (response.rc == 0);
            }
        });
         */

        /*** Filters modal ***/

        // load data for filters (e.g. alert types in the selected range)
        async function filterModalLoadData() {
            const [begin, end] = getTimestampRange();

            /* Here it is where we can load dynamic data on time range change */
        }

        alertStats.filterModalShow = function(edit) {
            $('#add-alert-filter-modal-title').text(edit ? "{{i18n('alerts_dashboard.edit_filter')}}" : "{{i18n('alerts_dashboard.add_filter')}}");
            $('#add-alert-filter-btn').text(edit ? "{{i18n('apply')}}" : "{{i18n('add')}}");
            $('#alert-filter-type-select').prop( "disabled", edit ? true : false);
            $('#add-alert-filter-modal').modal('show');
        }

        const filterModalMakeTag = (formSelector) => {

           const $inputsTemplate = $(`${formSelector} .alert-filter-template-container [name]`);

           const params = {
               alert_filter_type: $(`${formSelector} [name='alert_filter_type']`).val()
           };

           // load each filter params inside the template container in params
           $inputsTemplate.each(function (i, input) {
               // $(this).attr('name')
               params['value'] = $(this).val().trim();
               params['label'] = $('option:selected', this).data('tagLabel');
               if (!params['label']) params['label'] = params['value'];
           });

           // console.log(params);

           const tag = { 
              label: i18n.tags[params['alert_filter_type']], // e.g. L7 Proto
              key: params['alert_filter_type'],              // e.g. l7_proto
              value: params['label'],                        // e.g. HTTP
              realValue: params['value']                     // e.g. 7
           };

           return tag;
       }

       function filterModalCloneTemplate(type) {
           const template = $(`template#${type}-filter-template`).html();
           // if the template is not empty then return a copy of the template content
           if (template && template.trim() != "") {
               const $template = $(template);
               return $template;
           }
           return (null);
       }

       const filterModalCreateTemplateOnSelect = (formSelector) => {

           const $templateContainer = $(`${formSelector} .alert-filter-template-container`);

           // on filter type Selection load the right template to fill
           $(`${formSelector} select[name='alert_filter_type']`).change(function (e) {
               const $option = $(this).find(`option[value='${$(this).val()}']`);
               const $cloned = filterModalCloneTemplate($option.data('alertFilterKey'));
               // show the template inside the modal container
               $templateContainer.hide().empty();
               if ($cloned) {
                   $templateContainer.append($(`<hr>`));
                   $templateContainer.append($cloned).show();
               }
               $(`${formSelector} span.test-feedback`).fadeOut();
           });
       }

       /* bind add filter event */
       $(`#add-alert-filter-modal form`).modalHandler({
           /* Note: no endpoint defined, ajax is not used here */
           resetAfterSubmit: false,
           onModalInit: () => { filterModalCreateTemplateOnSelect(`#add-alert-filter-modal`); },
           onModalShow: () => {
               // load the template of the selected filter
               const $cloned = filterModalCloneTemplate($(`#add-alert-filter-modal select[name='alert_filter_type'] option:selected`).data('alertFilterKey'));
               if ($cloned) {
                   $(`#add-alert-filter-modal form .alert-filter-template-container`).empty().append($(`<hr>`), $cloned).show();
               }
           },
           beforeSumbit: () => {
               $(`#add-alert-filter-modal form button[type='submit']`).click(function () {
                   $(`#add-alert-filter-modal form span.invalid-feedback`).hide();
               });

               $(`#add-alert-filter-modal .test-feedback`).hide();

               const tag = filterModalMakeTag(`#add-alert-filter-modal form`);

               addFilterTag(tag);

               return {};
           },
           onSubmitSuccess: (response) => {
               // hide modal
               $(`#add-alert-filter-modal`).modal('hide');
               $(`#add-alert-filter-modal form .alert-filter-template-container`).hide();
               return true;
           }
       }).invokeModalInit();


    $(document).ready(function () {
        $.getJSON("rest/v1/get/alert/blocks/blocks.lua",function (data) {

            totalAlerts = $('#totalAlerts');
            topAlertType = $('#topAlertType');
            topVictim = $('#topVictim');
            topAttacker = $('#topAttacker');


            totalAlerts.html(data.rsp[0]);
            topAlertType.html(data.rsp[1])
            topVictim.html(data.rsp[2])
            topAttacker.html(data.rsp[3])

        });
    });

    $(document).ready(function(){
        let tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        let tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return (new bootstrap.Tooltip(tooltipTriggerEl));
        })
    })


    });
</script>