{
	"swagger": "2.0",
	"info": {
		"version": "3.9",
		"title": "ntopng",
		"description": "ntopng RESTful API documentation"
	},
	"tags": [{
			"name": "Interfaces",
			"description": "Everything about interfaces"
		},
		{
			"name": "Hosts",
			"description": "Everything about hosts"
		},
		{
			"name": "Alerts",
			"description": "Everything about alerts"
		},
	 	{
			"name": "Flows",
			"description": "Everything about flows"
		},
		{
			"name": "PCAP",
			"description": "Raw PCAP traffic"
	 	},
		{
			"name": "Users",
			"description": "ntopng users management"
		},
		{
			"name": "Infrastructures",
			"description": "Manage infrastructure configurations"
		},
		{
			"name": "Health",
			"description": "Everything about system status"
		}, 
		{
			"name": "Configurations",
			"description": "Everything about system configurations"
		}
	],
	"schemes": [
		"https",
		"http"
	],
	"paths": {
		"/lua/rest/v2/get/interface/data.lua": {
			"get": {
				"tags": [
					"Interfaces"
				],
				"summary": "Get interface data",
				"description": "Interface data is returned",
				"operationId": "get_interface_data",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Interface"
						}
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/bcast_domains.lua": {
			"get": {
				"tags": [
					"Interfaces"
				],
				"summary": "Get interface broadcast domains",
				"description": "Interface broadcast domains as detected from ARP traffic and broadcast traffic are returned",
				"operationId": "get_interface_bcast_domains",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Interface"
						}
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
    "/lua/rest/v2/get/interface/address.lua": {
			"get": {
				"tags": [
					"Interfaces"
				],
				"summary": "Get interface IP addresses",
				"description": "List of interface IP addresses is returned",
				"operationId": "get_interface_address",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"name": "ifid",
					"in": "query",
					"description": "Interface identifier",
					"required": true,
					"type": "integer",
					"format": "int32"
				}],
				"responses": {
					"0": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Interface"
						}
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
					"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/l7/stats.lua": {
			"get": {
				"tags": [
					"Interfaces"
				],
				"summary": "Get L7 statistics for an interface",
				"description": "nDPI statistics",
				"operationId": "get_interface_l7_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "ndpistats_mode",
						"in": "query",
						"description": "Stats mode: 'sinceStartup' or 'count'",
						"required": true,
						"type": "string"
					},
					{
						"name": "breed",
						"in": "query",
						"description": "Show breed",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "ndpi_category",
						"in": "query",
						"description": "Show nDPI category",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "all_values",
						"in": "query",
						"description": "Return all the values available",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "max_values",
						"in": "query",
						"description": "Get at most max_values, by default 5",
						"required": false,
						"type": "int16"
					},
					{
						"name": "collapse_stats",
						"in": "query",
						"description": "Collapse the returned stats into 'Other' stats if bytes/flows are too low (< 3%)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/dscp/stats.lua": {
			"get": {
				"tags": [
					"Interfaces"
				],
				"summary": "Get IP DSCP statistics for an interface",
				"description": "DSCP statistics",
				"operationId": "get_interface_dscp_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/active.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get active hosts",
				"description": "List of active hosts",
				"operationId": "get_host_active",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "currentPage",
						"in": "query",
						"description": "Pagination: page (optional)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "perPage",
						"in": "query",
						"description": "Pagination: items per page (optional)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "sortColumn",
						"in": "query",
						"description": "Pagination: column for sorting (e.g. ip, name, since, last, alerts, country, vlan, num_flows, traffic, thpt) (optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "sortOrder",
						"in": "query",
						"description": "Pagination: sorting order: 'asc' or 'desc' (optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "all",
						"in": "query",
						"description": "Get all hosts (optional)",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "mode",
						"in": "query",
						"description": "Mode filter: all, local, remote, broadcast_domain, filtered, blacklisted, dhcp (optional)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/interfaces.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get host interfaces",
				"description": "All interface ids of a given host are returned",
				"operationId": "get_host_interfaces",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Host"
						}
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/data.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get host data",
				"description": "Host data is returned",
				"operationId": "get_host_json",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Host"
						}
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-4": {
						"description": "INVALID_HOST"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					},
					"-8": {
						"description": "BAD_CONTENT"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/custom_data.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get host custom data",
				"description": "Custom data is returned for one or all hosts",
				"operationId": "get_host_custom_data_json",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": false,
						"type": "string"
					},
					{
						"name": "field_alias",
						"in": "query",
						"description": "Field alias",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Host"
						}
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-4": {
						"description": "INVALID_HOST"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					},
					"-8": {
						"description": "BAD_CONTENT"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/l7/stats.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get L7 statistics for a host",
				"description": "nDPI statistics",
				"operationId": "get_host_l7_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					},
					{
						"name": "breed",
						"in": "query",
						"description": "Show breed",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "ndpi_category",
						"in": "query",
						"description": "Show nDPI category",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "collapse_stats",
						"in": "query",
						"description": "Collapse the returned stats into 'Other' stats if bytes/flows are too low (< 3%)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/dscp/stats.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get IP DSCP statistics for a host",
				"description": "DSCP statistics",
				"operationId": "get_host_dscp_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					},
					{
						"name": "direction",
						"in": "query",
						"description": "Select direction: 'sent' or 'recvd' (default)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/set/host/alias.lua": {
			"post": {
				"tags": [
					"Hosts"
				],
				"summary": "Set host alias",
				"description": "Set hsot custom name",
				"operationId": "set_host_alias",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "formData",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "custom_name",
						"in": "formData",
						"description": "Custom name",
						"required": true,
						"type": "string"
					}

				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/set/host/notes.lua": {
			"post": {
				"tags": [
					"Checks"
				],
				"summary": "Set host custom notes",
				"description": "Given an host and a note, it is going to set that Note to the host",
				"operationId": "import_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "custom_notes",
						"in": "form",
						"description": "Custom Host Note",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/host/flows/data.lua": {
			"post": {
				"tags": [
					"Host"
				],
				"summary": "Get host flows data",
				"description": "Given an host return the information used to create the sankey chart with all the flows information regarding that hosts (protocols, traffic, ecc.)",
				"operationId": "host_flows_sankey",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "host",
            "in": "formData",
            "description": "Host address",
            "required": true,
            "type": "string"
          },{
            "name": "hosts_type",
            "in": "query",
            "description": "Currently available: local_only -> return only flows between local hosts, remote_only -> return only flows between remote hosts, local_origin_remote_target -> return only flows between local clients and remote servers, remote_origin_local_target -> return only flows between local servers and remote clients, all_hosts -> return all flows",
            "required": true,
            "type": "string"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/trigger/host/alert.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Trigger an external alert on a host",
				"description": "Trigger alert",
				"operationId": "trigger_host_alert",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "formData",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "formData",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "formData",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					},
					{
						"name": "score",
						"in": "formData",
						"description": "Set the alert score",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "info",
						"in": "formData",
						"description": "Set the alert description",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/asn/asn_info.lua": {
			"post": {
				"tags": [
					"Autonomous System"
				],
				"summary": "Get Autonomous systems data",
				"description": "Return the ASN data ntopng collected from analyzing the network. If an ASN is given, then return the data regarding the requested ASN",
				"operationId": "asn_data",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "asn",
            "in": "formData",
            "description": "Autonomous System ID",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
          "-2": {
            "description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/get/asn/asn_name.lua": {
			"post": {
				"tags": [
					"Autonomous System"
				],
				"summary": "Get Autonomous systems name",
				"description": "Return the ASN name given an IP",
				"operationId": "asn_name",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ip",
            "in": "query",
            "description": "IP Address",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
          "-2": {
            "description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/get/country/country_name.lua": {
			"post": {
				"tags": [
					"Country"
				],
				"summary": "Get Country Name",
				"description": "Return the Country name given a country code",
				"operationId": "country_code",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "country_id",
            "in": "query",
            "description": "Country Code",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
          "-2": {
            "description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/get/alert/type/consts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get alert type constants",
				"description": "Alert type string and integer alert key for each defined alert",
				"operationId": "get_alert_type_consts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/alert/list/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "List stored interface alerts",
				"description": "List alerts stored in the ntopng alert database",
				"operationId": "get_alert_list_alert",
				"produces": [
					"application/json"
				],
			    "parameters": [
					{
						"name": "alert_family",
						"in": "query",
						"description": "Alert family. Possible values: active_monitoring, flow, host, interface, mac , network , snmp , system , user",
						"required": true,
						"type": "string"
					},
				        {
						"name": "epoch_begin",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "epoch_end",
						"in": "query",
						"description": "End time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "select_clause",
						"in": "query",
						"description": "Select clause (default: *)",
						"required": false,
						"type": "string"
					},
					{
						"name": "where_clause",
						"in": "query",
						"description": "Where clause (default: none). IP values should be double-quoted and between parenthesis (e.g. IPV4_SRC_ADDR = (\"192.168.1.1\")).",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxhits_clause",
						"in": "query",
						"description": "Max hits (default: 10)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "order_by_clause",
						"in": "query",
						"description": "Order by clause (default: no order)",
						"required": false,
						"type": "string"
					},
					{
						"name": "group_by_clause",
						"in": "query",
						"description": "Group by clause (default: no group)",
						"required": false,
						"type": "string"
					}

			    ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/alert/severity/consts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get alert severity constants",
				"description": "Alert severity string and integer severity id for each defined severity",
				"operationId": "get_alert_severity_consts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/alert/type/counters.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get alert counters by type",
				"description": "Alert type counters indescending order",
				"operationId": "get_alert_type_counters",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Status filter (historical, historical-flows)",
						"required": true,
						"type": "string"
					},
					{
						"name": "epoch_begin",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "epoch_end",
						"in": "query",
						"description": "End time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					}],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/alert/severity/counters.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get alert counters by severity",
				"description": "Alert severity counters in descending order",
				"operationId": "get_alert_severity_counters",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Status filter (historical, historical-flows)",
						"required": true,
						"type": "string"
					},
					{
						"name": "epoch_begin",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "epoch_end",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					}],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/l4/protocol/consts.lua": {
			"get": {
				"tags": [
					"L4 Protocols"
				],
				"summary": "Get L4 protocol constants",
				"description": "L4 protocol names and integer identifiers",
				"operationId": "get_l4_protocol_consts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/l7/application/consts.lua": {
			"get": {
				"tags": [
					"L7 Application Protocols"
				],
				"summary": "Get L7 application protocol constants",
				"description": "L7 application protocol names and integer identifiers",
				"operationId": "get_l7_application_consts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/l7/category/consts.lua": {
			"get": {
				"tags": [
					"L7 Application Categories"
				],
				"summary": "Get L7 application category constants",
				"description": "L7 application category names and integer identifiers",
				"operationId": "get_l7_category_consts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/edit/category/category.lua": {
			"get": {
				"tags": [
					"L7 Application Categories"
				],
				"summary": "Change the custom hosts for a specific category",
				"description": "Given a category, an alias for the category and a list of hosts, networks or domain names, separated by comma, it is going to change the alias of the category and aggregate the traffic done by those hosts into the category",
				"operationId": "edit_l7_category",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "category",
            "in": "query",
            "description": "Category, formatted as cat_{id}, where ID is the ID of the category",
            "required": true,
            "type": "string",
            "format": "string"
          },{
            "name": "custom_hosts",
            "in": "query",
            "description": "List of Hosts, Networks, Domain Names, separated by comma",
            "required": true,
            "type": "string",
            "format": "string"
          },{
            "name": "alias",
            "in": "query",
            "description": "Alias of the Category",
            "required": true,
            "type": "string",
            "format": "string"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/version.lua": {
			"get": {
				"tags": [
					"REST API"
				],
				"summary": "Get supported and current REST API versions",
				"description": "Return all the supported REST API versions and the current REST API version used",
				"operationId": "rest_version",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
    "/lua/rest/v2/get/ntopng/interfaces.lua": {
			"get": {
				"tags": [
					"Interfaces"
				],
				"summary": "Get ntopng actively monitored interfaces names and ids",
				"description": "Interface name and integer interface id for each actively monitored ntopng interface",
				"operationId": "get_ntopng_interfaces",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/flow/active.lua": {
			"get": {
				"tags": [
					"Flows"
				],
				"summary": "Get active flows",
				"description": "List of active flows",
				"operationId": "get_flow_active",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "currentPage",
						"in": "query",
						"description": "Pagination: page (optional)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "perPage",
						"in": "query",
						"description": "Pagination: items per page (optional)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "sortColumn",
						"in": "query",
						"description": "Pagination: column for sorting (e.g. 'score') (optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "sortOrder",
						"in": "query",
						"description": "Pagination: sorting order: 'asc' or 'desc' (optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address filter (optional)",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID filter (optional)",
						"required": false,
						"type": "integer",
						"format": "int16"
					},
					{
						"name": "l4proto",
						"in": "query",
						"description": "L4 protocol filter (optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "application",
						"in": "query",
						"description": "Application protocol filter (optional)",
						"required": false,
						"type": "string"
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "Add more details including TCP stats (optional)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/flow/l4/counters.lua": {
			"get": {
				"tags": [
					"Flows"
				],
				"summary": "Get flow counters for L4 protocols",
				"description": "Number of active flows per L4 protocol",
				"operationId": "get_flow_l4_counters",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/flow/l7/counters.lua": {
			"get": {
				"tags": [
					"Flows"
				],
				"summary": "Get flow counters for L7 protocols",
				"description": "Number of active flows per L7 application protocol",
				"operationId": "get_flow_l7_counters",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/db/columns_info.lua": {
      "get": {
				"tags": [
					"Flows"
				],
				"summary": "Get Clickhouse available columns",
				"description": "Executes a query to the flows database and return all the available columns the DB has",
				"operationId": "get_flows_columns",
				"produces": [
					"application/json"
				],
				"parameters": [],
        "responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
    },
    "/lua/pro/rest/v2/get/db/flows.lua": {
			"get": {
				"tags": [
					"Flows"
				],
				"summary": "Get flows data. Columns include (but are not limited to) IP_PROTOCOL_VERSION, FLOW_TIME, FIRST_SEEN, LAST_SEEN, VLAN_ID, PACKETS, TOTAL_BYTES, SRC2DST_BYTES, DST2SRC_BYTES, IPV4_SRC_ADDR, IPV4_DST_ADDR, IPV6_SRC_ADDR, IPV6_DST_ADDR, PROTOCOL, L7_PROTO.",
				"description": "Executes a query to the flows database",
				"operationId": "get_flows_data",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "begin_time_clause",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "end_time_clause",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "select_clause",
						"in": "query",
						"description": "Select clause (default: *)",
						"required": false,
						"type": "string"
					},
					{
						"name": "where_clause",
						"in": "query",
						"description": "Where clause (default: none). IP values should be double-quoted and between parenthesis (e.g. IPV4_SRC_ADDR = (\"192.168.1.1\")).",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxhits_clause",
						"in": "query",
						"description": "Max hits (default: 10)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "order_by_clause",
						"in": "query",
						"description": "Order by clause (default: no order)",
						"required": false,
						"type": "string"
					},
					{
						"name": "group_by_clause",
						"in": "query",
						"description": "Group by clause (default: no group)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/db/topk_flows.lua": {
			"get": {
				"tags": [
					"Flows"
				],
				"summary": "Get Top-K flows data. Columns include (but are not limited to) IP_PROTOCOL_VERSION, FLOW_TIME, FIRST_SEEN, LAST_SEEN, VLAN_ID, PACKETS, TOTAL_BYTES, SRC2DST_BYTES, DST2SRC_BYTES, IPV4_SRC_ADDR, IPV4_DST_ADDR, IPV6_SRC_ADDR, IPV6_DST_ADDR, PROTOCOL, L7_PROTO",
				"description": "Executes a top-k query to the flows database",
				"operationId": "get_topk_data",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "begin_time_clause",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "end_time_clause",
						"in": "query",
						"description": "End time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "select_keys_clause",
						"in": "query",
						"description": "Select comma-separated keys list (default: IPV4_SRC_ADDR,IPV4_DST_ADDR,L7_PROTO)",
						"required": false,
						"type": "string"
					},
					{
						"name": "select_values_clause",
						"in": "query",
						"description": "Select value (default: BYTES)",
						"required": false,
						"type": "string"
					},
					{
						"name": "where_clause",
						"in": "query",
						"description": "Where clause (default: none)",
						"required": false,
						"type": "string"
					},
					{
						"name": "topk_clause",
						"in": "query",
						"description": "Top-K clause (default: SUM)",
						"required": false,
						"type": "string"
					},
					{
						"name": "approx_search",
						"in": "query",
						"description": "Approximate search (default: true)",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxhits_clause",
						"in": "query",
						"description": "Max hits (default: 10)",
						"required": false,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},

		"/lua/pro/rest/v2/get/interface/top/local/talkers.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get Top local talkers",
				"description": "Get the Top 10 local talkers",
				"operationId": "get_local_talkers",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface ID",
            "required": true,
            "type": "number"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/top_ts_stats.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get Top Timeseries stats",
				"description": "Get the Top timeseries stats",
				"operationId": "get_local_talkers",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ts_query",
            "in": "query",
            "description": "data used to get the timeseries; e.g. format: 'ifid:1,protocol:DNS' , where 'ifid:1' stands for interface ID 1 and 'protocol:DNS' stands for DNS protocol information",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "detail_view",
            "in": "query",
            "description": "Top information requested, currently available: top_protocols -> Top Application data, top_categories -> Top Categories data, top_senders -> Top Local Senders data, top_receivers -> Top Local Receivers data",
            "required": true,
            "type": "string"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/top/remote/talkers.lua": {
			"get": {
        "tags": [
          "Hosts"
        ],
        "summary": "Get Top remote talkers",
        "description": "Get the Top 10 remote talkers",
				"operationId": "get_remote_talkers",
        "produces": [
          "application/json"
        ],
        "parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface ID",
						"required": true,
						"type": "number"
					}
				],
        "responses": {
          "0": {
            "description": "OK"
          },
          "-2": {
            "description": "INVALID_INTERFACE"
					}
        }
      }
    },
		"/lua/pro/rest/v2/get/snmp/device/system.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Get system information",
				"description": "Get system information for a single or all SNMP devices",
				"operationId": "get_snmp_device_system",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "The IP address of the SNMP device (optional, all devices are returned if empty)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
    "/lua/pro/rest/v2/get/snmp/device/interfaces.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Get interfaces information",
				"description": "Get interfaces information for a single or all SNMP devices",
				"operationId": "get_snmp_device_interfaces",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "The IP address of the SNMP device (optional, all devices are returned if empty)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/snmp/device/lldp.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Get LLDP adjacency information",
				"description": "Get LLDP adjacencies for a single or all SNMP devices",
				"operationId": "get_snmp_device_lldp",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "The IP address of the SNMP device (optional, all devices are returned if empty)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/snmp/device/bridge.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Get bridge MIB information",
				"description": "Get bridge MIB information for a single or all SNMP devices",
				"operationId": "get_snmp_device_bridge",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "The IP address of the SNMP device (optional, all devices are returned if empty)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
    "/lua/pro/rest/v2/add/snmp/device.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Add SNMP devices",
				"description": "Add devices to the monitored SNMP devices",
				"operationId": "add_snmp_device",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "snmp_host",
						"in": "query",
						"description": "IP address or symbolic name of and an SNMP device",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_read_community",
						"in": "query",
						"description": "The SNMP read community to use (SNMP v1/v2c only)",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_write_community",
						"in": "query",
						"description": "The SNMP write community to use (SNMP v1/v2c only)",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_version",
						"in": "query",
						"description": "The SNMP version to use: 2 (SNMP v3), 1 (v2c) or 0 (v1)",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_level",
						"in": "query",
						"description": "Used only with SNMP v3: noAuthNoPriv, authNoPriv, or authPriv)",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_auth_protocol",
						"in": "query",
						"description": "Used only with SNMP v3 and level not set to noAuthNoPriv: MD5 or SHA",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_auth_passphrase",
						"in": "query",
						"description": "Used only with SNMP v3 and level not set to noAuthNoPriv: 8 chars+ passphrase",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_privacy_protocol",
						"in": "query",
						"description": "Used only with SNMP v3 and level set to autPriv: DES or AES",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_privacy_passphrase",
						"in": "query",
						"description": "Used only with SNMP v3 and level set to autPriv: 8 chars+ passphrase",
						"required": false,
						"type": "string"
					},
					{
						"name": "cidr",
						"in": "query",
						"description": "Either 24 or 32. If 32, snmp_host is treated as single host. If 24 snmp_host is treated as as CIDR address",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-4": {
						"description": "INVALID_HOST"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-9": {
						"description": "NAME_RESOLUTION_FAILED"
					},
					"-10": {
						"description": "SNMP_DEVICE_ALREADY_ADDED"
					},
					"-11": {
						"description": "SNMP_DEVICE_UNREACHABLE"
					},
					"-12": {
						"description": "NO_SNMP_DEVICE_DISCOVERED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/edit/snmp/device/device.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Edit a SNMP device",
				"description": "Edit an existing monitored SNMP device",
				"operationId": "add_snmp_device",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "snmp_host",
						"in": "query",
						"description": "IP address or symbolic name of and an SNMP device",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_read_community",
						"in": "query",
						"description": "The SNMP read community to use (SNMP v1/v2c only)",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_write_community",
						"in": "query",
						"description": "The SNMP write community to use (SNMP v1/v2c only)",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_version",
						"in": "query",
						"description": "The SNMP version to use: 2 (SNMP v3), 1 (v2c) or 0 (v1)",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_level",
						"in": "query",
						"description": "Used only with SNMP v3: noAuthNoPriv, authNoPriv, or authPriv)",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_auth_protocol",
						"in": "query",
						"description": "Used only with SNMP v3 and level not set to noAuthNoPriv: MD5 or SHA",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_auth_passphrase",
						"in": "query",
						"description": "Used only with SNMP v3 and level not set to noAuthNoPriv: 8 chars+ passphrase",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_privacy_protocol",
						"in": "query",
						"description": "Used only with SNMP v3 and level set to autPriv: DES or AES",
						"required": false,
						"type": "string"
					},
					{
						"name": "snmp_privacy_passphrase",
						"in": "query",
						"description": "Used only with SNMP v3 and level set to autPriv: 8 chars+ passphrase",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-4": {
						"description": "INVALID_HOST"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-9": {
						"description": "NAME_RESOLUTION_FAILED"
					},
					"-10": {
						"description": "SNMP_DEVICE_ALREADY_ADDED"
					},
					"-11": {
						"description": "SNMP_DEVICE_UNREACHABLE"
					},
					"-12": {
						"description": "NO_SNMP_DEVICE_DISCOVERED"
					},
					"-22": {
						"description": "SNMP_UNKNOWN_DEVICE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/change/snmp/device/interface/status.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Change SNMP device interface status",
				"description": "Change the status of an SNMP device in terface to up or down",
				"operationId": "change_snmp_device_interface_status",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "IP address of an SNMP device",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_admin_status",
						"in": "query",
						"description": "The new admin status, either 'up' or 'down'",
						"required": true,
						"type": "string"
					},
					{
						"name": "snmp_port_idx",
						"in": "query",
						"description": "The index of the SNMP device interface",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-4": {
						"description": "INVALID_HOST"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-26": {
						"description": "SNMP_DEVICE_INTERFACE_STATUS_CHANGE_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/get/pcap/live_extraction.lua": {
			"get": {
				"tags": [
					"PCAP"
				],
				"summary": "Live PCAP traffic extraction",
				"description": "Raw PCAP data is returned",
				"operationId": "live_extraction",
				"produces": [
					"application/vnd.tcpdump.pcap"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "epoch_begin",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "epoch_end",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "bpf_filter",
						"in": "query",
						"description": "BPF filter",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"FILE": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/rest/v2/get/pcap/live_traffic.lua": {
			"get": {
				"tags": [
					"PCAP"
				],
				"summary": "Live traffic capture",
				"description": "Raw PCAP data is returned",
				"operationId": "live_traffic",
				"produces": [
					"application/vnd.tcpdump.pcap"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "bpf_filter",
						"in": "query",
						"description": "BPF filter",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"FILE": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/db/filter/bpf.lua": {
			"get": {
				"tags": [
					"PCAP"
				],
				"summary": "BPF filter generation",
				"description": "Convert tags used to extract data from the database into the equivalent BPF filter, suitable for traffic extraction",
				"operationId": "get_db_filter_bpf",
				"produces": [
					"application/json"
				],
				"parameters": [{
          "name": "ifid",
          "in": "query",
          "description": "Interface identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
              },
               {
          "name": "epoch_begin",
          "in": "query",
          "description": "Start time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
               },
               {
          "name": "epoch_end",
          "in": "query",
          "description": "End time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
          }, {
						"name": "l7proto",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7proto_master",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7cat",
						"in": "query",
						"description": "Application category identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "flow_risk",
						"in": "query",
						"description": "Flow risk identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "l4proto",
						"in": "query",
						"description": "Transport protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip_version",
						"in": "query",
						"description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip",
						"in": "query",
						"description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_ip",
						"in": "query",
						"description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_ip",
						"in": "query",
						"description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "traffic_direction",
						"in": "query",
						"description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "name",
						"in": "query",
						"description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_name",
						"in": "query",
						"description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_name",
						"in": "query",
						"description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "network_name",
						"in": "query",
						"description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "src2dst_dscp",
						"in": "query",
						"description": "Client to Server DSCP identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_port",
						"in": "query",
						"description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_port",
						"in": "query",
						"description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "country",
						"in": "query",
						"description": "Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_country",
						"in": "query",
						"description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_country",
						"in": "query",
						"description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_asn",
						"in": "query",
						"description": "Client ASN identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_asn",
						"in": "query",
						"description": "Server ASN identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_nw_latency",
						"in": "query",
						"description": "Client network latency  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_nw_latency",
						"in": "query",
						"description": "Server network latency  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "observation_point_id",
						"in": "query",
						"description": "Observation point identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "probe_ip",
						"in": "query",
						"description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "vlan_id",
						"in": "query",
						"description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "snmp_interface",
						"in": "query",
						"description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "input_snmp",
						"in": "query",
						"description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "output_snmp",
						"in": "query",
						"description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "src2dst_tcp_flags",
						"in": "query",
						"description": "Client to Server TCP Flags (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "dst2src_tcp_flags",
						"in": "query",
						"description": "Server to Client TCP Flags (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "severity",
						"in": "query",
						"description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "score",
						"in": "query",
						"description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "mac",
						"in": "query",
						"description": "MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_mac",
						"in": "query",
						"description": "Client MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_mac",
						"in": "query",
						"description": "Server MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "network",
						"in": "query",
						"description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_network",
						"in": "query",
						"description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_network",
						"in": "query",
						"description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "info",
						"in": "query",
						"description": "Info field (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "bytes",
						"in": "query",
						"description": "Total Bytes  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "packets",
						"in": "query",
						"description": "Total Packets  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "host_pool_id",
						"in": "query",
						"description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_host_pool_id",
						"in": "query",
						"description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_host_pool_id",
						"in": "query",
						"description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "l7_error_id",
						"in": "query",
						"description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_proc_name",
						"in": "query",
						"description": "Client process name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_proc_name",
						"in": "query",
						"description": "Server process name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_user_name",
						"in": "query",
						"description": "Client user name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_user_name",
						"in": "query",
						"description": "Server user name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"FILE": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/db/ts.lua": {
			"get": {
				"tags": [
					"Timeseries"
				],
				"summary": "Return the number of flows in a period of time",
				"description": "Return the timeseries of number of flows in a period of time",
				"operationId": "live_traffic",
				"produces": [
					"application/json"
				],
				"parameters": [{
          "name": "ifid",
          "in": "query",
          "description": "Interface identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
              },
               {
          "name": "epoch_begin",
          "in": "query",
          "description": "Start time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
               },
               {
          "name": "epoch_end",
          "in": "query",
          "description": "End time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
               },{
						"name": "alert_id",
						"in": "query",
						"description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7proto",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7proto_master",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7cat",
						"in": "query",
						"description": "Application category identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "flow_risk",
						"in": "query",
						"description": "Flow risk identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "l4proto",
						"in": "query",
						"description": "Transport protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip_version",
						"in": "query",
						"description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip",
						"in": "query",
						"description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_ip",
						"in": "query",
						"description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_ip",
						"in": "query",
						"description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "traffic_direction",
						"in": "query",
						"description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "name",
						"in": "query",
						"description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_name",
						"in": "query",
						"description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_name",
						"in": "query",
						"description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "network_name",
						"in": "query",
						"description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "src2dst_dscp",
						"in": "query",
						"description": "Client to Server DSCP identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_port",
						"in": "query",
						"description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_port",
						"in": "query",
						"description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "country",
						"in": "query",
						"description": "Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_country",
						"in": "query",
						"description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_country",
						"in": "query",
						"description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_asn",
						"in": "query",
						"description": "Client ASN identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_asn",
						"in": "query",
						"description": "Server ASN identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_nw_latency",
						"in": "query",
						"description": "Client network latency  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_nw_latency",
						"in": "query",
						"description": "Server network latency  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "observation_point_id",
						"in": "query",
						"description": "Observation point identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "probe_ip",
						"in": "query",
						"description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "vlan_id",
						"in": "query",
						"description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "snmp_interface",
						"in": "query",
						"description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "input_snmp",
						"in": "query",
						"description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "output_snmp",
						"in": "query",
						"description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "src2dst_tcp_flags",
						"in": "query",
						"description": "Client to Server TCP Flags (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "dst2src_tcp_flags",
						"in": "query",
						"description": "Server to Client TCP Flags (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "severity",
						"in": "query",
						"description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "score",
						"in": "query",
						"description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "mac",
						"in": "query",
						"description": "MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_mac",
						"in": "query",
						"description": "Client MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_mac",
						"in": "query",
						"description": "Server MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "network",
						"in": "query",
						"description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_network",
						"in": "query",
						"description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_network",
						"in": "query",
						"description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "info",
						"in": "query",
						"description": "Info field (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "bytes",
						"in": "query",
						"description": "Total Bytes  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "packets",
						"in": "query",
						"description": "Total Packets  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "host_pool_id",
						"in": "query",
						"description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_host_pool_id",
						"in": "query",
						"description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_host_pool_id",
						"in": "query",
						"description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "l7_error_id",
						"in": "query",
						"description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_proc_name",
						"in": "query",
						"description": "Client process name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_proc_name",
						"in": "query",
						"description": "Server process name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_user_name",
						"in": "query",
						"description": "Client user name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_user_name",
						"in": "query",
						"description": "Server user name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"FILE": {
						"description": "OK"
					},
					"-1": {
						"description": "NOT_FOUND"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/rest/v2/add/host/pool.lua": {
			"post": {
				"tags": [
					"Pools"
				],
				"summary": "Add an host pool",
				"description": "Add an host pool with members and configuration",
				"operationId": "add_host_pool",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool_name": "string",
						"pool_members": "string",
						"confset_id": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-13": {
						"description": "ADD_POOL_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/edit/host/pool.lua": {
			"post": {
				"tags": [
					"Pools"
				],
				"summary": "Edit an host pool",
				"description": "Edit an host pool with members and configuration",
				"operationId": "edit_host_pool",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool": "int32",
						"pool_name": "string",
						"pool_members": "string",
						"confset_id": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-14": {
						"description": "EDIT_POOL_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/edit/host_pool/pool.lua": {
			"post": {
				"tags": [
					"Pools"
				],
				"summary": "Edit an host pool pool",
				"description": "Edit an host pool pool (only recipients edit is allowed)",
				"operationId": "edit_host_pool_pool",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool": "int32",
						"pool_name": "string",
						"pool_members": "string",
						"recipients": "string",
						"confset_id": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-14": {
						"description": "EDIT_POOL_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/host/pool.lua": {
			"post": {
				"tags": [
					"Pools"
				],
				"summary": "Delete an host pool",
				"description": "Delete an host pool",
				"operationId": "delete_host_pool",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "pool",
            "in": "query",
            "description": "Host Pool ID, required to delete the given pool",
            "required": true,
            "type": "number"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-16": {
						"description": "POOL_NOT_FOUND"
					}
				}
			}
		},
		"/lua/rest/v2/delete/pools.lua": {
			"post": {
				"tags": [
					"Pools"
				],
				"summary": "Delete all pools for any available pool type",
				"description": "Delete all pools for any available pool type",
				"operationId": "delete_pools",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/delete/recipients.lua": {
			"post": {
				"tags": [
					"Notification Recipients"
				],
				"summary": "Delete all defined recipients and reset them to factory-defaults",
				"description": "Delete all defined recipients and reset them to factory-defaults",
				"operationId": "delete_recipients",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/delete/endpoints.lua": {
			"post": {
				"tags": [
					"Notification Endpoints"
				],
				"summary": "Delete all defined notification endpoints and reset them to factory-defaults",
				"description": "Delete all defined notification endpoints and reset them to factory-defaults",
				"operationId": "delete_endpoints",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/pools.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Get one or all host pools",
				"description": "Get one or all host pools",
				"operationId": "get_host_pools",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-16": {
						"description": "POOL_NOT_FOUND"
					}
				}
			}
		},
		"/lua/rest/v2/get/pools.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Get all pools of any type",
				"description": "Get all pools defined for any available pool type",
				"operationId": "get_all_pools",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/pool/members.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Get all host pool members",
				"description": "Get all the members of a given host pool",
				"operationId": "get_host_pool_members",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool": "int32",
						"member": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-16": {
						"description": "POOL_NOT_FOUND"
					}
				}
			}
		},
		"/lua/rest/v2/bind/host/pool/member.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Bind a member to an host pool",
				"description": "Bind a member to an host pool",
				"operationId": "bind_host_pool_member",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool": "int32",
						"member": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-17": {
						"description": "BIND_POOL_MEMBER_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/pool_by_member.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Get an host pool given a member",
				"description": "Get an host pool given a member",
				"operationId": "get_host_pool_by_member",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"member": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		
		
		"/lua/rest/v2/export/all/config.lua": {
			"get": {
				"tags": [
					"All"
				],
				"summary": "Export all configurations as a JSON file",
				"description": "Export all configurations including Pools, Active Monitoring, Notifications (Endpoints and Recipients), Checks, SNMP devices",
				"operationId": "export_all_config",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/export/active_monitoring/config.lua": {
			"get": {
				"tags": [
					"Active Monitoring"
				],
				"summary": "Export the active monitoring configuration as a JSON file",
				"description": "Export the active monitoring configuration",
				"operationId": "export_active_monitoring_config",
				"produces": [
					"application/json"
				],
				"parameters": [	{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/export/notifications/config.lua": {
			"get": {
				"tags": [
					"Notifications"
				],
				"summary": "Export the notifications configuration as a JSON file",
				"description": "Export the configuration for endpoints and recipients",
				"operationId": "export_notifications_config",
				"produces": [
					"application/json"
				],
				"parameters": [	{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/export/pool/config.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Export the pools configuration as a JSON file",
				"description": "Export the configuration of all pools and dependencies (notifications, SNMP, active monitoring, checks",
				"operationId": "export_pool_config",
				"produces": [
					"application/json"
				],
				"parameters": [	{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/export/scripts/config.lua": {
			"get": {
				"tags": [
					""
				],
				"summary": "Export the Checks configuration as a JSON file",
				"description": "Export the configuration for all checks",
				"operationId": "export_scripts_config",
				"produces": [
					"application/json"
				],
				"parameters": [	{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/export/snmp/config.lua": {
			"get": {
				"tags": [
					""
				],
				"summary": "Export the SNMP configuration as a JSON file",
				"description": "Export the configuration for the SNMP devices",
				"operationId": "export_snmp_config",
				"produces": [
					"application/json"
				],
				"parameters": [	{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/import/all/config.lua": {
			"post": {
				"tags": [
					"All"
				],
				"summary": "Import all configurations providing a JSON file",
				"description": "Import all configurations including Pools, Active Monitoring, Notifications (Endpoints and Recipients), Checks, SNMP devices",
				"operationId": "import_all_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/import/active_monitoring/config.lua": {
			"post": {
				"tags": [
					"Active Monitoring"
				],
				"summary": "Import the active monitoring configuration providing a JSON file",
				"description": "Import the active monitoring configuration",
				"operationId": "import_active_monitoring_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/import/notifications/config.lua": {
			"post": {
				"tags": [
					"Notifications"
				],
				"summary": "Import the notifications configuration providing a JSON file",
				"description": "Import the configuration for endpoints and recipients",
				"operationId": "import_notifications_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/import/pool/config.lua": {
			"post": {
				"tags": [
					"Pools"
				],
				"summary": "Import the pools configuration providing a JSON file",
				"description": "Import the configuration of all pools and dependencies (notifications, SNMP, active monitoring, checks",
				"operationId": "import_pool_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/import/scripts/config.lua": {
			"post": {
				"tags": [
					""
				],
				"summary": "Import the Checks configuration providing a JSON file",
				"description": "Import the configuration for all checks",
				"operationId": "import_scripts_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/import/snmp/config.lua": {
			"post": {
				"tags": [
					""
				],
				"summary": "Import the SNMP configuration providing a JSON file",
				"description": "Import the configuration for the SNMP devices",
				"operationId": "import_snmp_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/reset/all/config.lua": {
			"post": {
				"tags": [
					"All"
				],
				"summary": "Reset all configurations",
				"description": "Reset all configurations",
				"operationId": "reset_all_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/check/infrastructure/config.lua": {
			"post": {
				"tags": [
					"All"
				],
				"summary": "Test an infrastructure configuration",
				"description": "Uses an url and token to connect to the REST API of an ntopng in the infrastructure",
				"operationId": "check_infrastructure_config",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "url",
						"in": "query",
						"description": "The URL of the ntopng in the infrastructure",
						"required": true,
						"type": "string"
					},
					{
						"name": "token",
						"in": "query",
						"description": "The REST API Token for the authentication",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-42": {
						"description": "INFRASTRUCTURE_INSTANCE_ALREADY_EXISTING"
					},
					"-43": {
						"description": "INFRASTRUCTURE_INSTANCE_CHECK_FAILED"
					},
					"-44": {
						"description": "INFRASTRUCTURE_INSTANCE_CHECK_NOT_FOUND"
					},
					"-45": {
						"description": "INFRASTRUCTURE_INSTANCE_CHECK_INVALID_RESPONSE"
					},
					"-46": {
						"description": "INFRASTRUCTURE_INSTANCE_CHECK_AUTH_FAILED"
					}
				}
			}
		},
	    "/lua/rest/v2/get/ntopng/users.lua": {
			"get": {
				"tags": [
					"Users"
				],
				"summary": "Read all configured ntopng users",
				"description": "Read all configured ntopng users",
				"operationId": "getall_ntopng_users",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
    "/lua/rest/v2/add/ntopng/user.lua": {
     "post": {
       "tags": [
         "Users"
       ],
       "summary": "Add ntopng user",
       "description": "Add a ntopng user",
       "operationId": "add_ntopng_user",
       "produces": [
         "application/json"
       ],
       "parameters": [
         {
           "name": "username",
           "in": "formData",
           "description": "Username",
           "required": true,
           "type": "string"
         },
         {
           "name": "full_name",
           "in": "formData",
           "description": "Full name",
           "required": true,
           "type": "string"
         },
         {
           "name": "password",
           "in": "formData",
           "description": "Password",
           "required": true,
           "type": "string"
         },
         {
           "name": "confirm_password",
           "in": "formData",
           "description": "Confirmed password",
           "required": true,
           "type": "string"
         },
         {
           "name": "user_role",
           "in": "formData",
           "description": "User role (unprivileged / administrator)",
           "required": true,
           "type": "string"
         },
         {
           "name": "allowed_networks",
           "in": "formData",
           "description": "Allowed networks (e.g. 0.0.0.0/0,::/0)",
           "required": true,
           "type": "string"
         },
         {
           "name": "allowed_interface",
           "in": "formData",
           "description": "Allowed interfaces (empty for all)",
           "required": true,
           "type": "string"
         },
         {
           "name": "user_language",
           "in": "formData",
           "description": "Language (en, it, de, jp, pt, cz)",
           "required": true,
           "type": "string"
         },
         {
           "name": "allow_pcap_download",
           "in": "formData",
           "description": "Allow PCAPs download (1 to allow)",
           "required": true,
           "type": "string"
         }
       ],
       "responses": {
         "0": {
           "description": "OK"
         },
         "-3": {
           "description": "NOT_GRANTED"
         },
         "-5": {
           "description": "INVALID_ARGUMENTS"
         },
         "-19": {
           "description": "PASSWORD_MISMATCH"
         },
         "-20": {
           "description": "ADD_USER_FAILED"
         },
         "-23": {
           "description": "USER_ALREADY_EXISTING"
         }
       }
     }
   },
		"/lua/rest/v2/delete/ntopng/user.lua": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Delete ntopng user",
				"description": "Delete a ntopng user",
				"operationId": "delete_ntopng_user",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "formData",
						"description": "Username",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-21": {
						"description": "DELETE_USER_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/edit/ntopng/user.lua": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Edit a ntopng user",
				"description": "Edit an existing ntopng user",
				"operationId": "edit_ntopng_user",
				"produces": [
					"application/json"
				],
			    "parameters": [
				{
						"name": "username",
						"in": "formData",
						"description": "Username",
						"required": true,
						"type": "string"
					},
					{
						"name": "user_role",
						"in": "formData",
						"description": "User role (unprivileged / administrator)",
						"required": true,
						"type": "string"
					},
					{
						"name": "allowed_networks",
						"in": "formData",
						"description": "Allowed networks (e.g. 0.0.0.0/0,::/0)",
						"required": true,
						"type": "string"
					},
					{
						"name": "allowed_interface",
						"in": "formData",
						"description": "Allowed interfaces (empty for all)",
						"required": true,
						"type": "string"
					},
					{
						"name": "user_language",
						"in": "formData",
						"description": "Language (en, it, de, jp, pt, cz)",
						"required": true,
						"type": "string"
					},
					{
						"name": "allow_pcap_download",
						"in": "formData",
						"description": "Allow PCAPs download (1 to allow)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-21": {
						"description": "DELETE_USER_FAILED"
					},
					"-23": {
						"description": "USER_DOES_NOT_EXIST"
					},
					"-24": {
						"description": "EDIT_USER_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/create/ntopng/session.lua": {
			"post": {
				"tags": [
					"Users"
				],
				"summary": "Create a new ntopng user session Cookie",
				"description": "Generate a new user session to be used as session Cookie",
				"operationId": "create_ntopng_session",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "formData",
						"description": "Username",
						"required": true,
						"type": "string"
					},
					{
						"name": "auth_session_duration",
						"in": "formData",
						"description": "Session duration (seconds). Default: 0 (no expiration).",
						"required": false,
						"type": "integer"
					}
				],
				"responses": {
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/infrastructure/instance.lua": {
			"get": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Get one or all infrastructure configs",
				"description": "Get one or all infrastructure configs",
				"operationId": "get_infrastructure_configs",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"instance_id": "string",
						"required": false
					},
					{
						"stats": "boolean",
						"required": false,
						"description": "Add statistics collected by the active monitoring module"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-32": {
						"description": "INFRASTRUCTURE_INSTANCE_NOT_FOUND"
					}
				}
			}
		},
		"/lua/pro/rest/v2/add/infrastructure/instance.lua": {
			"post": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Add a new infrastructure configuration",
				"description": "Add a new infrastructure configuration",
				"operationId": "add_infrastructure_config",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "url",
						"description": "The URL of the ntopng in the infrastructure",
						"required": true,
						"type": "string"
					},
					{
						"name": "alias",
						"description": "An alias for the infrastructure",
						"required": true,
						"type": "string"
					},
					{
						"name": "token",
						"description": "The REST API Token for the authentication",
						"required": true,
						"type": "string"
					},
					{
						"name": "rtt_threshold",
						"description": "RTT threshold used by the active monitoring",
						"required": true,
						"type": "int32"
					},
					{
						"name": "bandwidth_threshold",
						"description": "Bandwidth threshold used by the active monitoring",
						"required": true,
						"type": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-34": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_ALIAS"
					},
					"-35": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_URL"
					},
					"-36": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_TOKEN"
					},
					"-37": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_RTT_THRESHOLD"
					},
					"-39": {
						"description": "INFRASTRUCTURE_INSTANCE_SAME_ALIAS"
					},
					"-40": {
						"description": "INFRASTRUCTURE_INSTANCE_SAME_URL"
					},
					"-41": {
						"description": "INFRASTRUCTURE_INSTANCE_SAME_TOKEN"
					},
					"-42": {
						"description": "INFRASTRUCTURE_INSTANCE_ALREADY_EXISTING"
					},
					"-47": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_BANDWIDTH_THRESHOLD"
					}
				}
			}
		},
		"/lua/pro/rest/v2/edit/infrastructure/instance.lua": {
			"post": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Edit an existing infrastructure configuration",
				"description": "Edit an existing infrastructure configuration",
				"operationId": "edit_infrastructure_config",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "instance_id",
						"description": "The ID of the infrastructure configuration to edit",
						"required": true,
						"type": "string"
					},
					{
						"name": "url",
						"description": "The URL of the ntopng in the infrastructure",
						"required": true,
						"type": "string"
					},
					{
						"name": "alias",
						"description": "An alias for the infrastructure",
						"required": true,
						"type": "string"
					},
					{
						"name": "token",
						"description": "The REST API Token for the authentication",
						"required": true,
						"type": "string"
					},
					{
						"name": "rtt_threshold",
						"description": "RTT threshold used by the active monitoring",
						"required": true,
						"type": "int32"
					},
					{
						"name": "bandwidth_threshold",
						"description": "Bandwidth threshold used by the active monitoring",
						"required": true,
						"type": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-32": {
						"description": "INFRASTRUCTURE_INSTANCE_NOT_FOUND"
					},
					"-33": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_ID"
					},
					"-34": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_ALIAS"
					},
					"-35": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_URL"
					},
					"-36": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_TOKEN"
					},
					"-37": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_RTT_THRESHOLD"
					},
					"-39": {
						"description": "INFRASTRUCTURE_INSTANCE_SAME_ALIAS"
					},
					"-40": {
						"description": "INFRASTRUCTURE_INSTANCE_SAME_URL"
					},
					"-41": {
						"description": "INFRASTRUCTURE_INSTANCE_SAME_TOKEN"
					},
					"-47": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_BANDWIDTH_THRESHOLD"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/infrastructure/instance.lua": {
			"post": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Delete an existing infrastructure configuration",
				"description": "Delete an existing infrastructure configuration",
				"operationId": "delete_infrastructure_config",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "instance_id",
						"description": "The ID of the infrastructure to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-32": {
						"description": "INFRASTRUCTURE_INSTANCE_NOT_FOUND"
					},
					"-33": {
						"description": "INFRASTRUCTURE_INSTANCE_EMPTY_ID"
					}
				}
			}
		},
		"/lua/rest/v2/import/infrastructure/config.lua": {
			"post": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Import the Infrastructure configuration providing a JSON file",
				"description": "Import the configuration for all infrastructure configurations",
				"operationId": "import_infrastructure_configs",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					},
					"-28": {
						"description": "PARTIAL_IMPORT"
					}
				}
			}
		},
		"/lua/rest/v2/export/infrastructure/config.lua": {
			"get": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Export the Infrastructure configurations as a JSON file",
				"description": "Export the configuration for the infrastructure configurations",
				"operationId": "export_infrastructure_config",
				"produces": [
					"application/json"
				],
				"parameters": [	{
						"name": "download",
						"in": "query",
						"description": "Download as file (no REST envelope)",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/enable/check.lua": {
			"post": {
				"tags": [
					"Checks"
				],
				"summary": "Enables a check",
				"description": "Enables a check",
				"operationId": "enable_check",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "check_subdir",
						"in": "form",
						"description": "The check subdir",
						"required": true,
						"type": "string"
					       },
					       {
						"name": "script_key",
						"in": "form",
						"description": "The key of the script",
						"required": true,
						"type": "string"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},				    
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/disable/check.lua": {
			"post": {
				"tags": [
					"Checks"
				],
				"summary": "Disables a check",
				"description": "Disables a check",
				"operationId": "disable_check",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "check_subdir",
						"in": "form",
						"description": "The check subdir",
						"required": true,
						"type": "string"
					       },
					       {
						"name": "script_key",
						"in": "form",
						"description": "The key of the script",
						"required": true,
						"type": "string"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},				    
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/delete/interface/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete interface alerts",
				"description": "Delete historical interface alerts",
				"operationId": "delete_interface_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
          "name": "ifid",
          "in": "query",
          "description": "Interface identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "epoch_begin",
          "in": "query",
          "description": "Start time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "epoch_end",
          "in": "query",
          "description": "End time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "alert_id",
          "in": "query",
          "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "severity",
          "in": "query",
          "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "score",
          "in": "query",
          "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "subtype",
          "in": "query",
          "description": "Alert subtype",
          "required": false,
          "type": "string"
        }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/host/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete host alerts",
				"description": "Delete historical host alerts",
				"operationId": "delete_host_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
          "name": "ifid",
          "in": "query",
          "description": "Interface identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "epoch_begin",
          "in": "query",
          "description": "Start time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "epoch_end",
          "in": "query",
          "description": "End time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "alert_id",
          "in": "query",
          "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "severity",
          "in": "query",
          "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "score",
          "in": "query",
          "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "vlan_id",
          "in": "query",
          "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "string"
        }, {
          "name": "ip_version",
          "in": "query",
          "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": false,
          "type": "string"
        }, {
          "name": "ip",
          "in": "query",
          "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": false,
          "type": "string"
        }, {
          "name": "name",
          "in": "query",
          "description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
          "required": false,
          "type": "string"
        }, {
          "name": "host_pool_id",
          "in": "query",
          "description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "string"
        }, {
          "name": "network",
          "in": "query",
          "description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": false,
          "type": "string"
        }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/host/new_devices.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete all new devices",
				"description": "Delete all new devices learned by ntopng",
				"operationId": "delete_host_new_devices",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/delete/network/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete network alerts",
				"description": "Delete historical network alerts",
				"operationId": "delete_network_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
          "name": "ifid",
          "in": "query",
          "description": "Interface identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "epoch_begin",
          "in": "query",
          "description": "Start time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "epoch_end",
          "in": "query",
          "description": "End time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "alert_id",
          "in": "query",
          "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": true,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "severity",
          "in": "query",
          "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "integer",
          "format": "int32"
        },
        {
          "name": "score",
          "in": "query",
          "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
          "required": false,
          "type": "integer",
          "format": "int32"
        }, {
          "name": "network_name",
          "in": "query",
          "description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
          "required": false,
          "type": "string"
        }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/all/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete all alerts",
				"description": "Delete all historical alerts",
				"operationId": "delete_all_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/am_host/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete active monitoring hosts alerts",
				"description": "Delete active monitoring hosts historical alerts",
				"operationId": "delete_am_host_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/user/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete user alerts",
				"description": "Delete user historical alerts",
				"operationId": "delete_user_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/mac/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete MAC alerts",
				"description": "Delete MAC historical alerts",
				"operationId": "delete_mac_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/system/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete system alerts",
				"description": "Delete system historical alerts",
				"operationId": "delete_system_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/delete/flow/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete flow alerts",
				"description": "Delete flow historical alerts",
				"operationId": "delete_flow_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_ip",
            "in": "query",
            "description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_ip",
            "in": "query",
            "description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_name",
            "in": "query",
            "description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_name",
            "in": "query",
            "description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_port",
            "in": "query",
            "description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_port",
            "in": "query",
            "description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7proto",
            "in": "query",
            "description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_country",
            "in": "query",
            "description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_country",
            "in": "query",
            "description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "probe_ip",
            "in": "query",
            "description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "input_snmp",
            "in": "query",
            "description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "output_snmp",
            "in": "query",
            "description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_host_pool_id",
            "in": "query",
            "description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_host_pool_id",
            "in": "query",
            "description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_network",
            "in": "query",
            "description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "srv_network",
            "in": "query",
            "description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7_error_id",
            "in": "query",
            "description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "traffic_direction",
            "in": "query",
            "description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/reset/snmp/config.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Reset SNMP configuration",
				"description": "Reset SNMP configuration including all configured devices",
				"operationId": "reset_snmp_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/reset/checks/config.lua": {
			"get": {
				"tags": [
					"Checks"
				],
				"summary": "Reset Checks configuration",
				"description": "Reset checks configuration",
				"operationId": "reset_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/reset/active_monitoring/config.lua": {
			"get": {
				"tags": [
					"Active Monitoring"
				],
				"summary": "Reset Active Monitoring configuration",
				"description": "Reset active monitoring configuration",
				"operationId": "reset_active_monitoring_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/reset/notifications/config.lua": {
			"get": {
				"tags": [
					"Notifications"
				],
				"summary": "Reset Notifications configuration",
				"description": "Reset notifications configuration",
				"operationId": "reset_notifications_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/interface/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge interface alerts",
				"description": "Acknowledge interface historical alerts",
				"operationId": "acknowledge_interface_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Alert subtype",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/host/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge host alerts",
				"description": "Acknowledge host historical alerts",
				"operationId": "acknowledge_host_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          }, {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, {
            "name": "name",
            "in": "query",
            "description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          }, {
            "name": "host_pool_id",
            "in": "query",
            "description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          }, {
            "name": "network",
            "in": "query",
            "description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/network/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge network alerts",
				"description": "Acknowledge network historical alerts",
				"operationId": "acknowledge_network_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "network_name",
            "in": "query",
            "description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/am_host/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge Active Monitoring alerts",
				"description": "Acknowledge Active Monitoring historical alerts",
				"operationId": "acknowledge_active_monitoring_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/user/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge user alerts",
				"description": "Acknowledge user historical alerts",
				"operationId": "acknowledge_user_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/mac/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge MAC alerts",
				"description": "Acknowledge MAC historical alerts",
				"operationId": "acknowledge_mac_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/system/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge system alerts",
				"description": "Acknowledge system historical alerts",
				"operationId": "acknowledge_system_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/acknowledge/flow/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge flow alerts",
				"description": "Acknowledge flow historical alerts",
				"operationId": "acknowledge_flow_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_ip",
            "in": "query",
            "description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_ip",
            "in": "query",
            "description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_name",
            "in": "query",
            "description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_name",
            "in": "query",
            "description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_port",
            "in": "query",
            "description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_port",
            "in": "query",
            "description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7proto",
            "in": "query",
            "description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_country",
            "in": "query",
            "description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_country",
            "in": "query",
            "description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "probe_ip",
            "in": "query",
            "description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "input_snmp",
            "in": "query",
            "description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "output_snmp",
            "in": "query",
            "description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_host_pool_id",
            "in": "query",
            "description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_host_pool_id",
            "in": "query",
            "description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_network",
            "in": "query",
            "description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "srv_network",
            "in": "query",
            "description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7_error_id",
            "in": "query",
            "description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "traffic_direction",
            "in": "query",
            "description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/charts/host/map.lua": {
			"get": {
				"tags": [
					"Charts"
				],
				"summary": "Get an host map",
				"description": "Get an host map",
				"operationId": "charts_host_map",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					      },
					       {
						"name": "bubble_mode",
						"in": "query",
						"description": "The identifier of the bubble chart to obtain",
						"required": true,
						"type": "integer",
						   "format": "int32"
					       },
					       {
						"name": "show_remote",
						"in": "query",
						"description": "Whether to show remote hosts",
						"required": false,
						"type": "boolean"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/charts/time/data.lua": {
			"get": {
				"tags": [
					"Charts"
				],
				"summary": "Get widget time data",
				"description": "Get widget time data",
				"operationId": "charts_time_data",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					      },
					       {
						"name": "epoch_begin",
						"in": "query",
						"description": "Start time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					       },
					       {
						"name": "epoch_end",
						"in": "query",
						"description": "End time (epoch)",
						"required": true,
						"type": "integer",
						"format": "int32"
					       },
					       {
						"name": "totalRows",
						"in": "query",
						"description": "The number of records",
						"required": false,
						"type": "integer",
						"format": "int32"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/datasource/interface/packet_distro.lua": {
			"get": {
				"tags": [
					"Datasource"
				],
				"summary": "Get interface packets distribution",
				"description": "Get interface packets distribution",
				"operationId": "get_datasource_interface_packet_distro",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/datasource/datasource.lua": {
			"get": {
				"tags": [
					"Datasource"
				],
				"summary": "Get datasource",
				"description": "Get datasource",
				"operationId": "get_datasource",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/nprobes/data.lua": {
			"get": {
				"tags": [
					"Traffic"
				],
				"summary": "Get interface nProbe data",
				"description": "Get data for nProbe instances connected to an ntopng interface",
				"operationId": "get_alert_type_counters",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/network/discovery/discover.lua": {
			"get": {
				"tags": [
					"Traffic"
				],
				"summary": "Get interface network discovery data",
				"description": "Get data regarding the network discovery done by an ntopng interface",
				"operationId": "get_interface_discovery",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "operating_system",
            "in": "query",
            "description": "Operating System identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "device_type",
            "in": "query",
            "description": "Device type identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "manufacturer",
            "in": "query",
            "description": "Manufacturer of the device",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get interface alerts timeseries",
				"description": "Get interface alerts timeseries",
				"operationId": "get_interface_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Alert subtype",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get interface alerts list",
				"description": "Get interface alerts list",
				"operationId": "get_interface_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Alert subtype",
            "required": true,
            "type": "string"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/interface/arp.lua": {
			"get": {
				"tags": [
					"ARP"
				],
				"summary": "Get interface ARP info",
				"description": "Get interface ARP info",
				"operationId": "get_interface_arp",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
				               },
					       {
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": false,
						"type": "string"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/timeseries/type/consts.lua": {
			"get": {
				"tags": [
					"Timeseries"
				],
				"summary": "Get available timeseries",
				"description": "Get all the available timeseries given a tag",
				"operationId": "get_timeseries_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "query",
            "in": "query",
            "description": "Tag used to retrieve the timeseries; currently available: iface, host, mac, subnet, asn, country, os, vlan, host_pool, pod, container, ht, system, profile, redis, influxdb, am, snmp_interface, snmp_device, obs_point, sflowdev_port, flowdev, flowdev_port",
            "required": true,
            "type": "string"
          }, {
            "name": "host",
            "in": "query",
            "description": "Host IP@VLAN, REQUIRED in case of timeseries regarding Host, SNMP or Flow devices",
            "required": false,
            "type": "string"
          }, {
            "name": "asn",
            "in": "query",
            "description": "ASN identifier, REQUIRED in case of timeseries regarding Autonomous Systems",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "pool",
            "in": "query",
            "description": "Host Pool identifier, REQUIRED in case of timeseries regarding Host Pools",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "vlan",
            "in": "query",
            "description": "VLAN identifier, REQUIRED in case of timeseries regarding VLANs",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "mac",
            "in": "query",
            "description": "MAC address, REQUIRED in case of timeseries regarding MACs",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/timeseries/ts_multi.lua": {
			"post": {
				"tags": [
					"Timeseries"
				],
				"summary": "Return timeseries",
				"description": "Return the requested timeseries in the requested timeframe",
				"operationId": "get_timeseries_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of timeseries points",
            "required": false,
            "type": "number"
          },
          {
            "name": "initial_point",
            "in": "query",
            "description": "A boolean used to return the first point of the timeseries or not",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ts_compare",
            "in": "query",
            "description": "Choices available: '30m', '1h', '1d'. A string reporting the timeframe of the timeseries to be compared to (e.g. '30m', means to return other then the timeserie requested, the 30 minutes before)",
            "required": false,
            "type": "string"
          },
          {
            "name": "ts_requests",
            "in": "query",
            "description": "An array of timeseries to be returned, containing ts_query, ts_schema and tskey (e.g. [{ts_query: 'ifid:1,asn:199524', ts_schema: 'asn:traffic', tskey: '199524'}]; the explaination of these three parameters can be found into '/lua/rest/v2/get/timeseries/ts.lua' REST)",
            "required": true,
            "type": "array"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/timeseries/ts.lua": {
			"get": {
				"tags": [
					"Timeseries"
				],
				"summary": "Get timeseries data",
				"description": "Get timeseries data",
				"operationId": "get_timeseries_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of timeseries points",
            "required": false,
            "type": "number"
          },
          {
            "name": "initial_point",
            "in": "query",
            "description": "A boolean used to return the first point of the timeseries or not",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "ts_compare",
            "in": "query",
            "description": "Choices available: '30m', '1h', '1d'. A string reporting the timeframe of the timeseries to be compared to (e.g. '30m', means to return other then the timeserie requested, the 30 minutes before)",
            "required": false,
            "type": "string"
          },
          {
            "name": "ts_query",
            "in": "query",
            "description": "Containing the parameters used to find the timeserie in the following format, parameter:value;parameter:value;... (e.g. 'ifid:1;host:192.168.1.1')",
            "required": false,
            "type": "string"
          },
          {
            "name": "tskey",
            "in": "query",
            "description": "Containing the timeseries key, whom the timeseries is referred to (e.g. if the timeserie is regarding the interface '7' or the host '192.168.1.1', then tskey is going to be '7' or '192.168.1.1')",
            "required": false,
            "type": "string"
          },
          {
            "name": "ts_schema",
            "in": "query",
            "description": "Contains the timeserie schema (e.g. 'iface:traffic')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/l4/contacted_hosts_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the contacted hosts information",
				"description": "Given an host, return the number of contacted hosts as a server and as a client",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/l4/data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about transport protocols",
				"description": "Given an host, return the transport protocols information (bytes sent, received, ...) of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/l7/breed_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about breed",
				"description": "Given an host, return the top breed information (bytes sent, received, ...) of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/l7/cat_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about categories",
				"description": "Given an host, return the categories information (bytes sent, received, ...) of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/l7/proto_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about application protocols",
				"description": "Given an host, return the application protocols information (bytes sent, received, ...) of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/packets/arp_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about ARP",
				"description": "Given an host, return the ARP information (bytes sent, received, ...) of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/packets/tcp_flags_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about TCP flags",
				"description": "Given an host, return the TCP flags information (bytes sent, received, ...) of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/port/cli_port_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about client ports",
				"description": "Given an host, return the client ports total bytes of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/port/srv_port_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about server ports",
				"description": "Given an host, return the server ports total bytes of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/port/table_port_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about ports used by application protocols",
				"description": "Given an host, return the ports and the protocols used on each port of an host",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/processes/listening_ports.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get the host information about listening ports",
				"description": "Given an host, return the information about listening ports (transport level protocol, package and process that's currently running on that port)",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/fingerprint/data.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get counters per type",
				"description": "Number of alerts per alert type",
				"operationId": "get_alert_type_counters",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
 				               },
					       {
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					       },
					       {
						"name": "fingerprint_type",
						"in": "query",
						"description": "The fingerprint type, either ja3 or hassh",
						"required": true,
						"type": "string"
 				               }
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get host alerts timeseries",
				"description": "Get host alerts timeseries",
				"operationId": "get_host_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
						"name": "vlan_id",
						"in": "query",
						"description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "ip_version",
						"in": "query",
						"description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip",
						"in": "query",
						"description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "name",
						"in": "query",
						"description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "host_pool_id",
						"in": "query",
						"description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "network",
						"in": "query",
						"description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/host/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get host alerts list",
				"description": "Get host alerts list",
				"operationId": "get_host_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          }, {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, {
            "name": "name",
            "in": "query",
            "description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          }, {
            "name": "host_pool_id",
            "in": "query",
            "description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          }, {
            "name": "network",
            "in": "query",
            "description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/recipient/pools.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Get recipient pools",
				"description": "Get all pools bound to a recipient",
				"operationId": "get_recipient_pools",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "recipient_id",
						"in": "query",
						"description": "Recipient identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/rest/v2/get/checks/config.lua": {
			"get": {
				"tags": [
					"Checks"
				],
				"summary": "Get Checks configuration",
				"description": "Get checks configuration",
				"operationId": "get_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/network/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get network alerts timeseries",
				"description": "Get network alerts timeseries",
				"operationId": "get_network_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
						"name": "network_name",
						"in": "query",
						"description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/network/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get network alerts list",
				"description": "Get network alerts list",
				"operationId": "get_network_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "network_name",
            "in": "query",
            "description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/all/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get all alerts timeseries",
				"description": "Get all alerts timeseries",
				"operationId": "get_all_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/all/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get all alerts list",
				"description": "Get all alerts list",
				"operationId": "get_all_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/am_host/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get Active Monitoring alerts timeseries",
				"description": "Get Active Monitoring alerts timeseries",
				"operationId": "get_active_monitoring_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/am_host/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get Active Monitoring alerts list",
				"description": "Get Active Monitoring alerts list",
				"operationId": "get_active_monitoring_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/user/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get user alerts timeseries",
				"description": "Get user alerts timeseries",
				"operationId": "get_user_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/user/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get user alerts list",
				"description": "Get user alerts list",
				"operationId": "get_user_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/mac/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get MAC alerts timeseries",
				"description": "Get MAC alerts timeseries",
				"operationId": "get_mac_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/mac/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get MAC alerts list",
				"description": "Get MAC alerts list",
				"operationId": "get_mac_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/system/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get system alerts timeseries",
				"description": "Get system alerts timeseries",
				"operationId": "get_system_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/system/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get system alerts list",
				"description": "Get system alerts list",
				"operationId": "get_system_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/dns/resolve.lua": {
			"get": {
				"tags": [
					"DNS"
				],
				"summary": "Resolve an host name into an IP address",
				"description": "Resolve an host name into an IP address",
				"operationId": "get_dns_resolve",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "hostname",
						"in": "query",
						"description": "The host name to be resolved",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-9": {
						"description": "NAME_RESOLUTION_FAILED"
					}
				}
			}
		},
		"/lua/rest/v2/get/category/list.lua": {
			"get": {
				"tags": [
					"Category"
				],
				"summary": "Get category information",
				"description": "Get all the category information available",
				"operationId": "get_category_info",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/geo_map/hosts.lua": {
			"get": {
				"tags": [
					"Geo Map"
				],
				"summary": "Get the Geo Map information",
				"description": "Get the Geo Map information available in ntopng",
				"operationId": "get_geo_map_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "host",
						"in": "query",
						"description": "Host address",
						"required": true,
						"type": "string"
					},
					{
						"name": "vlan",
						"in": "query",
						"description": "VLAN ID",
						"required": false,
						"type": "integer",
						"format": "int16"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/get/flow/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get flow alerts timeseries",
				"description": "Get flow alerts timeseries",
				"operationId": "get_flow_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
						"name": "ip_version",
						"in": "query",
						"description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "ip",
						"in": "query",
						"description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "cli_ip",
						"in": "query",
						"description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "srv_ip",
						"in": "query",
						"description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "cli_name",
						"in": "query",
						"description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					},
          {
						"name": "srv_name",
						"in": "query",
						"description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					},
          {
						"name": "cli_port",
						"in": "query",
						"description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "srv_port",
						"in": "query",
						"description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "vlan_id",
						"in": "query",
						"description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					},
          {
						"name": "l7proto",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "cli_country",
						"in": "query",
						"description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "srv_country",
						"in": "query",
						"description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "probe_ip",
						"in": "query",
						"description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "input_snmp",
						"in": "query",
						"description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, 
          {
						"name": "output_snmp",
						"in": "query",
						"description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "snmp_interface",
						"in": "query",
						"description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "cli_host_pool_id",
						"in": "query",
						"description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					},
          {
						"name": "srv_host_pool_id",
						"in": "query",
						"description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					},
          {
						"name": "cli_network",
						"in": "query",
						"description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, 
          {
						"name": "srv_network",
						"in": "query",
						"description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "l7_error_id",
						"in": "query",
						"description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "traffic_direction",
						"in": "query",
						"description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/flow/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get flow alerts list",
				"description": "Get flow alerts list",
				"operationId": "get_flow_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_ip",
            "in": "query",
            "description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_ip",
            "in": "query",
            "description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_name",
            "in": "query",
            "description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_name",
            "in": "query",
            "description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_port",
            "in": "query",
            "description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_port",
            "in": "query",
            "description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7proto",
            "in": "query",
            "description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_country",
            "in": "query",
            "description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_country",
            "in": "query",
            "description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "probe_ip",
            "in": "query",
            "description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "input_snmp",
            "in": "query",
            "description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "output_snmp",
            "in": "query",
            "description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_host_pool_id",
            "in": "query",
            "description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_host_pool_id",
            "in": "query",
            "description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_network",
            "in": "query",
            "description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "srv_network",
            "in": "query",
            "description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7_error_id",
            "in": "query",
            "description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "traffic_direction",
            "in": "query",
            "description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/flow/traffic_stats.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get traffic stats for active flows",
				"description": "Get traffic stats for active flows",
				"operationId": "get_flow_traffic_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/rest/v2/edit/ntopng/incr_hosts.lua": {
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Double the maximum number of hosts managed by ntopng",
				"description": "Double the maximum number of hosts managed by ntopng",
				"operationId": "edit_ntopng_incr_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/rest/v2/edit/ntopng/incr_flows.lua": {
			"post": {
				"tags": [
					"Configuration"
				],
				"summary": "Double the maximum number of flows managed by ntopng",
				"description": "Double the maximum number of flows managed by ntopng",
				"operationId": "edit_ntopng_incr_flows",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/rest/v2/set/checks/config.lua": {
			"post": {
				"tags": [
					"Checks"
				],
				"summary": "Set Checks configuration",
				"description": "Set Checks configuration",
				"operationId": "set_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "JSON",
						"in": "form",
						"description": "Check configuration in JSON",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/export/checks/config.lua": {
			"get": {
				"tags": [
					"Checks"
				],
				"summary": "Export Checks configuration",
				"description": "Export Checks configuration",
				"operationId": "export_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/import/checks/config.lua": {
			"post": {
				"tags": [
					"Checks"
				],
				"summary": "Import Checks configuration",
				"description": "Import Checks configuration",
				"operationId": "import_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "JSON",
						"in": "form",
						"description": "The Checks configuration in JSON",
						"required": true,
						"type": "string"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-27": {
						"description": "CONFIGURATION_FILE_MISMATCH"
					}
				}
			}
		},
		"/lua/rest/v2/set/checks/auto_refresh.lua": {
			"post": {
				"tags": [
					"Checks"
				],
				"summary": "Import Checks configuration",
				"description": "Import Checks configuration",
				"operationId": "import_checks_config",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "alert_page_refresh_rate_enabled",
						"in": "form",
						"description": "Enable the alert page refresh (1 to enable, 0 otherwise)",
						"required": true,
						"type": "number",
            "format": "int8"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/import/pool/host_pool/members.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Import host pool members",
				"description": "Import host pool members",
				"operationId": "import_pool_host_pool_members",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "pool",
						"in": "form",
						"description": "Pool identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
				               },
					       {
						"name": "host_pool_members",
						"in": "form",
						"description": "A newline-separated list of host pool members",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/rest/v2/create/ntopng/api_token.lua": {
			"post": {
				"tags": [
					"User"
				],
				"summary": "Create an API token",
				"description": "Create an API token",
				"operationId": "create_ntopng_api_token",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "username",
						"in": "form",
						"description": "An existing ntopng username",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/host/alert/exclusions.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete host alert exclusions",
				"description": "Delete host alert exclusions",
				"operationId": "delete_host_alert_exclusions",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "alert_addr",
            "in": "query",
            "description": "The host IP address",
            "required": true,
            "type": "string"
          },
          {
						"name": "alert_key",
						"in": "query",
						"description": "The host alert key to exclude from host alerts",
						"type": "integer",
						"format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/snmp/device.lua": {
			"get": {
				"tags": [
					"SNMP"
				],
				"summary": "Delete an SNMP device",
				"description": "Delete an SNMP device from the monitored SNMP devices",
				"operationId": "delete_snmp_device",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "IP address of an SNMP device",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "SNMP_DEVICE_DELETED_SUCCESSFULLY"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/snmp/device/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete SNMP device alerts",
				"description": "Delete SNMP device alerts",
				"operationId": "delete_snmp_device_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/all/alert/exclusions.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete all alert exclusions",
				"description": "Delete all configured host or flow alert exclusions for a specific host",
				"operationId": "delete_host_alert_exclusions",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "type",
						"in": "query",
						"description": "Either 'host' or 'flow'",
						"required": true,
						"type": "string"
				               },
				               {
						"name": "host",
						"in": "query",
						"description": "The IP address of the host",
						"required": false,
						"type": "string"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/flow/alert/exclusions.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete flow alert exclusions",
				"description": "Delete flow alert exclusions",
				"operationId": "delete_flow_alert_exclusions",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "alert_addr",
						"in": "query",
						"description": "The host IP address",
						"required": true,
						"type": "string"
				               },
				               {
						"name": "alert_key",
						"in": "query",
						"description": "The flow alert key to exclude from flow alerts",
						"type": "integer",
						"format": "int32"
					       }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/acknowledge/snmp/device/alerts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Acknowledge SNMP device alerts",
				"description": "Acknowledge SNMP device historical alerts",
				"operationId": "acknowledge_snmp_device_alerts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/maps/periodicity_map.lua": {
			"get": {
				"tags": [
					"Maps"
				],
				"summary": "Get the periodicity map of an interface",
				"description": "Get the periodicity map of an interface",
				"operationId": "get_maps_periodicity_map",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/maps/service_map.lua": {
			"get": {
				"tags": [
					"Maps"
				],
				"summary": "Get the service map of an interface",
				"description": "Get the service map of an interface",
				"operationId": "get_maps_service_map",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/flowdevices/stats.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get flow devices stats",
				"description": "get flow devices stats",
				"operationId": "get_flowdevices_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/top/sites.lua": {
			"get": {
				"tags": [
					"Sites"
				],
				"summary": "Get interface top sites",
				"description": "Get the top sites for an interface",
				"operationId": "get_interface_top_sites",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/top/l7_stats.lua": {
			"get": {
				"tags": [
					"Top"
				],
				"summary": "Get interface top Layer-7 stats",
				"description": "Get interface top Layer-7 stats",
				"operationId": "get_interface_top_l7_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/top/score.lua": {
			"get": {
				"tags": [
					"Top"
				],
				"summary": "Get interface top score stats",
				"description": "Get interface top score stats",
				"operationId": "get_interface_top_score",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/top/realtime_traffic.lua": {
			"get": {
				"tags": [
					"Top"
				],
				"summary": "Get interface top traffic stats",
				"description": "Get interface top traffic stats",
				"operationId": "get_interface_top_traffic",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get interface alert stats",
				"description": "Get interface alert stats",
				"operationId": "get_interface_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "subtype",
            "in": "query",
            "description": "Alert subtype",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/alert/filter/consts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get available alert filters",
				"description": "Given a specific alert type (flow, host, ...) return the available filters",
				"operationId": "get_interface_alert_filter",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "page",
						"in": "query",
						"description": "Alert Page (interface, flow, host, network, snmp_device, mac, user, am_host, system)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/observation_point/stats.lua": {
			"get": {
				"tags": [
					"Observation Point"
				],
				"summary": "Remove an Observation Point stats",
				"description": "Remove Observation Point stats stored until now. If the Observation Point is no more seen on the network, even the entry is going to be deleted",
				"operationId": "remove_observation_point",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "observation_point",
            "in": "query",
            "description": "Identifier of the rule to delete",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/observation_points/alias.lua": {
			"get": {
				"tags": [
					"Observation Point"
				],
				"summary": "Get the alias of an Observation Point",
				"description": "The alias of an Observation Point is returned",
				"operationId": "get_observation_point_alias",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "observation_point_id",
						"in": "query",
						"description": "Observation Point ID",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/observation_points/stats.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get observation points alert stats",
				"description": "Get observation points alert stats",
				"operationId": "get_observation_points_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/set/observation_points/alias.lua": {
			"post": {
				"tags": [
					"Observation Point"
				],
				"summary": "Set the alias of an Observation Point",
				"description": "Set the alias of an Observation Point is returned",
				"operationId": "set_observation_point_alias",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "alias",
						"in": "formData",
						"description": "New Observation Point Alias",
						"required": true,
						"type": "string"
					},
					{
						"name": "observation_point_id",
						"in": "formData",
						"description": "Observation Point ID",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/observation_points/stats.lua": {
			"get": {
				"tags": [
					"Observation Point"
				],
				"summary": "Delete an Observation Point",
				"description": "Given an Observation Point ID, it is going to delete it and all the information related to it",
				"operationId": "delete_observation_point",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "observation_point_id",
            "in": "query",
            "description": "Observation Point ID",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/host/top/local/sites.lua": {
			"get": {
				"tags": [
					"Top"
				],
				"summary": "Get host top local sites",
				"description": "Get host top local sites",
				"operationId": "get_host_top_local_sites",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
				               },
				               {
						"name": "host",
						"in": "query",
						"description": "The IP address of the host",
						"required": true,
						"type": "string"
					       }
					       
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/host/alert/exclusions.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get host alert exclusions",
				"description": "Get host alert exclusions",
				"operationId": "get_host_alert_exclusions",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "The host IP address",
						"required": true,
						"type": "string"
				               }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/host/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get host alert stats",
				"description": "Get host alert stats",
				"operationId": "get_host_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          }, {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, {
            "name": "name",
            "in": "query",
            "description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          }, {
            "name": "host_pool_id",
            "in": "query",
            "description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          }, {
            "name": "network",
            "in": "query",
            "description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
	         "/lua/pro/rest/v2/get/host/no_tx_peers.lua": {
			"get": {
				"tags": [
					"Peers"
				],
				"summary": "Get RX-only host peers",
				"description": "Get list of host with RX-only traffic (i.e. no TX traffic sent)",
				"operationId": "no_tx_peers.lua",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
	}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/db/historical_db_search.lua": {
			"get": {
				"tags": [
					"Traffic"
				],
				"summary": "Get historical flows info",
				"description": "Get historical flows info",
				"operationId": "get_db_historical_db_search",
				"produces": [
					"application/json"
				],
				"parameters": [{
          "name": "ifid",
          "in": "query",
          "description": "Interface identifier",
          "required": true,
          "type": "integer",
          "format": "int32"
              },
               {
          "name": "epoch_begin",
          "in": "query",
          "description": "Start time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
               },
               {
          "name": "epoch_end",
          "in": "query",
          "description": "End time (epoch)",
          "required": true,
          "type": "integer",
          "format": "int32"
               },{
						"name": "alert_id",
						"in": "query",
						"description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7proto",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7proto_master",
						"in": "query",
						"description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "l7cat",
						"in": "query",
						"description": "Application category identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "flow_risk",
						"in": "query",
						"description": "Flow risk identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "l4proto",
						"in": "query",
						"description": "Transport protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip_version",
						"in": "query",
						"description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "ip",
						"in": "query",
						"description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_ip",
						"in": "query",
						"description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_ip",
						"in": "query",
						"description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "traffic_direction",
						"in": "query",
						"description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "name",
						"in": "query",
						"description": "Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_name",
						"in": "query",
						"description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_name",
						"in": "query",
						"description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "network_name",
						"in": "query",
						"description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "src2dst_dscp",
						"in": "query",
						"description": "Client to Server DSCP identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_port",
						"in": "query",
						"description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_port",
						"in": "query",
						"description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "country",
						"in": "query",
						"description": "Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_country",
						"in": "query",
						"description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_country",
						"in": "query",
						"description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_asn",
						"in": "query",
						"description": "Client ASN identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_asn",
						"in": "query",
						"description": "Server ASN identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_nw_latency",
						"in": "query",
						"description": "Client network latency  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_nw_latency",
						"in": "query",
						"description": "Server network latency  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "observation_point_id",
						"in": "query",
						"description": "Observation point identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "probe_ip",
						"in": "query",
						"description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "vlan_id",
						"in": "query",
						"description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "snmp_interface",
						"in": "query",
						"description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "input_snmp",
						"in": "query",
						"description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "output_snmp",
						"in": "query",
						"description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "src2dst_tcp_flags",
						"in": "query",
						"description": "Client to Server TCP Flags (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "dst2src_tcp_flags",
						"in": "query",
						"description": "Server to Client TCP Flags (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "severity",
						"in": "query",
						"description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "score",
						"in": "query",
						"description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "mac",
						"in": "query",
						"description": "MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_mac",
						"in": "query",
						"description": "Client MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_mac",
						"in": "query",
						"description": "Server MAC Address (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "network",
						"in": "query",
						"description": "Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_network",
						"in": "query",
						"description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_network",
						"in": "query",
						"description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "info",
						"in": "query",
						"description": "Info field (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
						"required": false,
						"type": "string"
					}, {
						"name": "bytes",
						"in": "query",
						"description": "Total Bytes  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "packets",
						"in": "query",
						"description": "Total Packets  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "host_pool_id",
						"in": "query",
						"description": "Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_host_pool_id",
						"in": "query",
						"description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_host_pool_id",
						"in": "query",
						"description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
						"required": false,
						"type": "string"
					}, {
						"name": "l7_error_id",
						"in": "query",
						"description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_proc_name",
						"in": "query",
						"description": "Client process name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_proc_name",
						"in": "query",
						"description": "Server process name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "cli_user_name",
						"in": "query",
						"description": "Client user name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}, {
						"name": "srv_user_name",
						"in": "query",
						"description": "Server user name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/snmp/device/alert/ts.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get SNMP device alerts timeseries",
				"description": "Get SNMP device alerts timeseries",
				"operationId": "get_snmp_device_alert_ts",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
						"name": "ip",
						"in": "query",
						"description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					},
          {
						"name": "snmp_interface",
						"in": "query",
						"description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/snmp/device/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get SNMP device alert stats",
				"description": "Get SNMP device alert stats",
				"operationId": "get_snmp_device_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/snmp/device/alert/list.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get SNMP device alerts list",
				"description": "Get SNMP device alerts list",
				"operationId": "get_snmp_device_alert_list",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
					{
						"name": "format",
						"in": "query",
						"description": "Format of the return data (json or txt)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/network/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get network alert stats",
				"description": "Get network alert stats",
				"operationId": "get_network_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }, {
            "name": "network_name",
            "in": "query",
            "description": "Network Name (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/sflowdevice/stats.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get sFlow device stats",
				"description": "get sFlow device stats",
				"operationId": "get_sflowdevice_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
				               },
				               {
						"name": "ip",
						"in": "query",
						"description": "The IP address of the device",
						"required": true,
						"type": "string"
					       },
				               {
						"name": "ifIdx",
						"in": "query",
						"description": "The interface index",
						"required": true,
						"type": "integer",
						"format": "int32"
					       }
			        ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/all/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get all alert stats",
				"description": "Get all alert stats",
				"operationId": "get_all_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/am_host/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get Active Monitoring alert stats",
				"description": "Get Active Monitoring alert stats",
				"operationId": "get_active_monitoring_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/user/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get user alert stats",
				"description": "Get user alert stats",
				"operationId": "get_user_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/mac/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get MAC alert stats",
				"description": "Get MAC alert stats",
				"operationId": "get_mac_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/system/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get system alert stats",
				"description": "Get system alert stats",
				"operationId": "get_system_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/system/data.lua": {
			"get": {
				"tags": [
					"System"
				],
				"summary": "Get system data",
				"description": "Get system data",
				"operationId": "get_system_data",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/infrastructure/data.lua": {
			"get": {
				"tags": [
					"System"
				],
				"summary": "Get infrastructure data",
				"description": "Get infrastructure data",
				"operationId": "get_infrastructure_data",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/sflowdevices/stats.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get sFlow devices stats",
				"description": "get sF devices stats",
				"operationId": "get_sflowdevices_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/flowdevice/stats.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get flow device stats",
				"description": "get flow device stats",
				"operationId": "get_flowdevice_stats",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
				               },
				               {
						"name": "ip",
						"in": "query",
						"description": "The IP address of the device",
						"required": true,
						"type": "string"
					       },
				               {
						"name": "ifIdx",
						"in": "query",
						"description": "The interface index",
						"required": true,
						"type": "integer",
						"format": "int32"
					       }
			        ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/flow/alert/exclusions.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get flow alert exclusions",
				"description": "Get flow alert exclusions",
				"operationId": "get_flow_alert_exclusions",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "host",
						"in": "query",
						"description": "The host IP address",
						"required": true,
						"type": "string"
				               }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/domain/alert/exclusions.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get domain alert exclusions",
				"description": "Get domain alert exclusions",
				"operationId": "get_domain_alert_exclusions",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/flow/alert/top.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get flow alert stats",
				"description": "Get flow alert stats",
				"operationId": "get_flow_alert_top",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_begin",
            "in": "query",
            "description": "Start time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "epoch_end",
            "in": "query",
            "description": "End time (epoch)",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "alert_id",
            "in": "query",
            "description": "Alert identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "severity",
            "in": "query",
            "description": "Severity identifier (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "score",
            "in": "query",
            "description": "Score (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "ip_version",
            "in": "query",
            "description": "IP version (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "ip",
            "in": "query",
            "description": "IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_ip",
            "in": "query",
            "description": "Client IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_ip",
            "in": "query",
            "description": "Server IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_name",
            "in": "query",
            "description": "Client Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_name",
            "in": "query",
            "description": "Server Hostname (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'in' -> contains, 'nin' -> not contains)",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_port",
            "in": "query",
            "description": "Client port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_port",
            "in": "query",
            "description": "Server port (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "vlan_id",
            "in": "query",
            "description": "VLAN ID  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7proto",
            "in": "query",
            "description": "Application protocol identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_country",
            "in": "query",
            "description": "Client Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_country",
            "in": "query",
            "description": "Server Country ID, e.g. IT (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "probe_ip",
            "in": "query",
            "description": "Probe IP (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "input_snmp",
            "in": "query",
            "description": "Input SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "output_snmp",
            "in": "query",
            "description": "Output SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "snmp_interface",
            "in": "query",
            "description": "SNMP interface identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_host_pool_id",
            "in": "query",
            "description": "Client Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "srv_host_pool_id",
            "in": "query",
            "description": "Server Host Pool identifier  (format: 'id;eq', where 'id' is the amount of traffic and 'eq' stands for 'equal', currently available: 'eq' -> equal, 'neq' -> not equal, 'lt' -> lesser then, 'lte' -> lesser or equal then, 'gt' -> greater then, 'gte' -> greater or equal then",
            "required": false,
            "type": "string"
          },
          {
            "name": "cli_network",
            "in": "query",
            "description": "Client Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          }, 
          {
            "name": "srv_network",
            "in": "query",
            "description": "Server Network identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "l7_error_id",
            "in": "query",
            "description": "Application layer error identifier (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "traffic_direction",
            "in": "query",
            "description": "Traffic direction identifier, currently available: 0 -> remote only, 1 -> local only, 2 -> remote to local, 3 -> local to remote (format: 'id;eq', where 'id' is the id and 'eq' stands for 'equal', currently available: 'eq', 'neq')",
            "required": false,
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "description": "Format of the return data (json or txt)",
            "required": false,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/geo_map/hosts.lua": {
			"get": {
				"tags": [
					"Hosts"
				],
				"summary": "Get hosts location",
				"description": "Get hosts location and other info",
				"operationId": "get_geo_hosts",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					}
				}
			}
		},
		"/lua/pro/rest/v2/add/alert/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Add an alert exclusion",
				"description": "Add an alert exclusion",
				"operationId": "add_alert_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "type",
            "in": "query",
            "description": "Type of the host to exclude (currently available: 'host', 'domain', 'certificate')",
            "required": true,
            "type": "string"
          },{
            "name": "alert_addr",
            "in": "query",
            "description": "Host IP of the address to exclude (with type: 'host')",
            "required": true,
            "type": "string"
          },{
            "name": "alert_domain",
            "in": "query",
            "description": "Domain to exclude (with type 'host')",
            "required": true,
            "type": "string"
          },{
            "name": "alert_certificate",
            "in": "query",
            "description": "Certificate to exclude (with type 'certificate')",
            "required": true,
            "type": "string"
          },{
            "name": "subdir",
            "in": "query",
            "description": "Type of alert to exclude (currently available: 'flow' or 'host'",
            "required": true,
            "type": "string"
          },{
            "name": "flow_alert_key",
            "in": "query",
            "description": "Flow alert identifier",
            "required": true,
            "type": "string"
          },{
            "name": "host_alert_key",
            "in": "query",
            "description": "Host alert identifier",
            "required": true,
            "type": "string"
          },{
            "name": "delete_alerts",
            "in": "query",
            "description": "Return true to delete the excluded alerts, false otherwise",
            "required": true,
            "type": "boolean"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
      }
    },
		"/lua/pro/rest/v2/get/alert/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Get the alert exclusions",
				"description": "Get all the available alert exclusions",
				"operationId": "get_alert_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "type",
            "in": "query",
            "description": "Type of the host to exclude (currently available: 'host', 'domain', 'certificate')",
            "required": true,
            "type": "string"
          }
        ],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
      }
    },
		"/lua/pro/rest/v2/delete/alert/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Delete an alert exclusion",
				"description": "Delete an alert exclusion",
				"operationId": "delete_alert_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "type",
            "in": "query",
            "description": "Type of the host to exclude (currently available: 'host', 'domain', 'certificate')",
            "required": true,
            "type": "string"
          },{
            "name": "alert_addr",
            "in": "query",
            "description": "Host IP of the address to exclude (with type: 'host')",
            "required": true,
            "type": "string"
          },{
            "name": "alert_domain",
            "in": "query",
            "description": "Domain to exclude (with type 'host')",
            "required": true,
            "type": "string"
          },{
            "name": "alert_certificate",
            "in": "query",
            "description": "Certificate to exclude (with type 'certificate')",
            "required": true,
            "type": "string"
          },{
            "name": "subdir",
            "in": "query",
            "description": "Type of alert to exclude (currently available: 'flow' or 'host'",
            "required": true,
            "type": "string"
          },{
            "name": "flow_alert_key",
            "in": "query",
            "description": "Flow alert identifier",
            "required": true,
            "type": "string"
          },{
            "name": "host_alert_key",
            "in": "query",
            "description": "Host alert identifier",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/add/device/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Add a device to exclude",
				"description": "Add a device to exclude to the MAC tracking (see for more info: Device/MAC Address Tracking)",
				"operationId": "add_device_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "mac_list",
            "in": "query",
            "description": "List of MAC addresses to exclude separated by commas",
            "required": true,
            "type": "string"
          },{
            "name": "trigger_alerts",
            "in": "query",
            "description": "Trigger the Unexpected Device Connected/Disconnected alert if set to true, otherwise not",
            "required": true,
            "type": "boolean"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/edit/device/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Edit a device to exclude",
				"description": "Edit a device to exclude to the MAC tracking (see for more info: Device/MAC Address Tracking)",
				"operationId": "edit_device_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "mac",
            "in": "query",
            "description": "MAC address to edit",
            "required": true,
            "type": "string"
          },{
            "name": "mac_alias",
            "in": "query",
            "description": "Alias used to rename the MAC address",
            "required": true,
            "type": "string"
          },{
            "name": "mac_status",
            "in": "query",
            "description": "MAC address status",
            "required": true,
            "type": "string"
          },{
            "name": "trigger_alerts",
            "in": "query",
            "description": "Trigger the Unexpected Device Connected/Disconnected alert if set to true, otherwise not",
            "required": true,
            "type": "boolean"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/device/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "Remove a device to exclude",
				"description": "Remove a device to exclude to the MAC tracking (see for more info: Device/MAC Address Tracking)",
				"operationId": "delete_device_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "device",
            "in": "query",
            "description": "MAC addresses to remove from the exclusions, or 'all' to delete all the MAC addresses excluded until now",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/device/exclusion.lua": {
			"get": {
				"tags": [
					"Alerts"
				],
				"summary": "List of excluded devices",
				"description": "Return the list of the excluded devices (see for more info: Device/MAC Address Tracking)",
				"operationId": "get_device_exclusion",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/add/filters/snapshot.lua": {
			"get": {
				"tags": [
					"Alert"
				],
				"summary": "Add a Snapshot",
				"description": "Add an alert Snapshot, used to save the state of an alerts page",
				"operationId": "add_alert_snapshot",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "snapshot_name",
            "in": "query",
            "description": "Snapshot",
            "required": true,
            "type": "string"
          },{
            "name": "filters",
            "in": "query",
            "description": "Filters separated by & (like the URL parameters)",
            "required": true,
            "type": "string"
          },{
            "name": "page",
            "in": "query",
            "description": "Name of the alert page (flow, host, ...)",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/filters/snapshot.lua": {
			"get": {
				"tags": [
					"Alert"
				],
				"summary": "Get a Snapshot",
				"description": "Get an alert Snapshot, used to save the state of an alerts page",
				"operationId": "get_alert_snapshot",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "page",
            "in": "query",
            "description": "Name of the alert page (flow, host, ...)",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/filters/snapshot.lua": {
			"get": {
				"tags": [
					"Alert"
				],
				"summary": "Remove a Snapshot",
				"description": "Remove an alert Snapshot, used to save the state of an alerts page",
				"operationId": "delete_alert_snapshot",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "snapshot_name",
            "in": "query",
            "description": "Snapshot",
            "required": true,
            "type": "string"
          },{
            "name": "page",
            "in": "query",
            "description": "Name of the alert page (flow, host, ...)",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Add Host Rule",
				"description": "Add an host rule to an interface, used to run periodic check on traffic and similar, on the timeseries",
				"operationId": "add_host_rule",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "host",
            "in": "query",
            "description": "Host to apply the check, IP address of the host or * to check for all the hosts",
            "required": true,
            "type": "string"
          },{
            "name": "frequency",
            "in": "query",
            "description": "Frequency of the check to run, every minute, every 5 minutes, every hour or daily ('min', '5min', 'hour', 'day')",
            "required": true,
            "type": "string"
          },{
            "name": "metric",
            "in": "query",
            "description": "Timeseries schema of the metric to analyze",
            "required": true,
            "type": "string"
          },{
            "name": "threshold",
            "in": "query",
            "description": "Threshold that if exceeded, it's going to trigger an alert",
            "required": true,
            "type": "string"
          },{
            "name": "metric_type",
            "in": "query",
            "description": "metric used to analyze the data, Throughput or Volume? (currently available: 'throughput', 'volume')",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get Host Rule",
				"description": "Get an host rule to an interface, used to run periodic check on traffic and similar, on the timeseries",
				"operationId": "get_host_rule",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Get Host Rule available metrics",
				"description": "Get an host rule available metrics, used to run periodic check on traffic and similar, on the timeseries",
				"operationId": "get_host_rule",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}
				}
			}
		},
		"/lua/pro/rest/v2/delete/interface/host_rules/add_host_rule.lua": {
			"get": {
				"tags": [
					"Host"
				],
				"summary": "Remove an Host Rule",
				"description": "Remove an host rule from an interface, used to run periodic check on traffic and similar, on the timeseries",
				"operationId": "remove_host_rule",
				"produces": [
					"application/json"
				],
				"parameters": [{
            "name": "ifid",
            "in": "query",
            "description": "Interface identifier",
            "required": true,
            "type": "integer",
            "format": "int32"
          },{
            "name": "rule_id",
            "in": "query",
            "description": "Identifier of the rule to delete",
            "required": true,
            "type": "string"
          }
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/set/pool/policy.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Set pool policy",
				"description": "Set pool policy",
				"operationId": "set_pool_policy",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"name": "ifid",
						"in": "query",
						"description": "Interface identifier",
						"required": true,
						"type": "integer",
						"format": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-5": {
						"description": "INVALID_ARGUMENTS"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					},
					"-7": {
						"description": "BAD_FORMAT"
					}				    
				}
			}
		},
		"/lua/pro/rest/v2/set/pool/policy_autoconf.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Set a pool policy from autoconfiguration",
				"description": "Set a pool policy from autoconfiguration",
				"operationId": "set_pool_policy_autoconf",
				"produces": [
					"application/json"
				],
				"parameters": [{
						"pool": "int32",
						"pool_name": "string",
						"pool_members": "string",
						"confset_id": "int32"
					}
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-2": {
						"description": "INVALID_INTERFACE"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/pro/rest/v2/export/pool/policy.lua": {
			"get": {
				"tags": [
					"Pools"
				],
				"summary": "Export pool policies",
				"description": "Export pool policies",
				"operationId": "export_pool_policy",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/reset/infrastructure/config.lua": {
			"post": {
				"tags": [
					"Infrastructures"
				],
				"summary": "Reset all infrastructure configurations",
				"description": "Reset all infrastructure configurations",
				"operationId": "reset_all_infrastructure_config",
				"produces": [
					"application/json"
				],
				"parameters": [
				],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-3": {
						"description": "NOT_GRANTED"
					}
				}
			}
		},
		"/lua/rest/v2/get/system/configurations/list_availabled_backups.lua": {
			"get": {
				"tags": [
					"Configurations"
				],
				"summary": "Get system configurations automatic backups",
				"description": "Get list of automatic system configurations backups",
				"operationId": "get_system_backups",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
					
				}
			}
		},
		"/lua/rest/v2/get/system/configurations/download_backup.lua": {
			"get": {
				"tags": [
					"Configurations"
				],
				"summary": "Get system configuration automatic backup",
				"description": "Get on of the automatic system configurations backups",
				"operationId": "get_system_backup",
				"produces": [
					"application/json"
				],
				"parameters": [{
					"epoch": "string",
					"download": "boolean"
				}],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
					
				}
			}
		},
		"/lua/rest/v2/get/system/health/stats.lua": {
			"get": {
				"tags": [
					"Health"
				],
				"summary": "Get system stats",
				"description": "Get statistics of the system on top of which ntopng is running",
				"operationId": "get_system_stats",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
					
				}
			}
		},
		"/lua/rest/v2/get/system/health/interfaces.lua": {
			"get": {
				"tags": [
					"Health"
				],
				"summary": "Get interfaces stats",
				"description": "Get statistics of every active interfaces",
				"operationId": "get_interfaces_stats",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
			}
		},
		"/lua/rest/v2/get/system/health/redis.lua": {
			"get": {
				"tags": [
					"Health"
				],
				"summary": "Get Redis Stats",
				"description": "Get all the available Redis Statistics",
				"operationId": "get_redis_stats",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
      		}
    	},
		"/lua/rest/v2/get/system/health/influxdb.lua": {
			"get": {
				"tags": [
					"Health"
				],
				"summary": "Get InfluxDB Stats",
				"description": "Get all the available InfluxDB Statistics",
				"operationId": "get_influxdb_stats",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
      		}
    	},
		"/lua/pro/rest/v2/get/system/health/clickhouse.lua": {
			"get": {
				"tags": [
					"Health"
				],
				"summary": "Get Clickhouse Stats",
				"description": "Get all the available Clickhouse Statistics",
				"operationId": "get_clickhouse_stats",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"0": {
						"description": "OK"
					},
					"-6": {
						"description": "INTERNAL_ERROR"
					}
				}
      		}
    	}
	},
	"definitions": {
		"Interface": {
			"type": "object",
			"properties": {
				"ifname": {
					"type": "string"
				},
				"is_view": {
					"type": "boolean",
					"default": false
				},
				"id": {
					"type": "integer",
					"format": "int64"
				},
				"speed": {
					"type": "integer",
					"format": "int32"
				},
				"epoch": {
					"type": "integer",
					"format": "int32"
				},
				"packets": {
					"type": "integer",
					"format": "int64"
				},
				"bytes": {
					"type": "integer",
					"format": "int64"
				},
				"drops": {
					"type": "integer",
					"format": "int64"
				},
				"num_devices": {
					"type": "integer",
					"format": "int32"
				},
				"num_hosts": {
					"type": "integer",
					"format": "int32"
				},
				"num_flows": {
					"type": "integer",
					"format": "int32"
				},
				"remote_bps": {
					"type": "integer",
					"format": "int32"
				},
				"remote_pps": {
					"type": "integer",
					"format": "int32"
				},
				"remote2local": {
					"type": "integer",
					"format": "int32"
				},
				"local2remote": {
					"type": "integer",
					"format": "int32"
				},
				"num_local_hosts": {
					"type": "integer",
					"format": "int32"
				},
				"alerts_stored": {
					"type": "boolean"
				},
				"engaged_alerts": {
					"type": "integer",
					"format": "int32"
				},
				"tcpPacketStats": {
					"type": "object",
					"properties": {
						"retransmissions": {
							"type": "integer",
							"format": "int32"
						},
						"lost": {
							"type": "integer",
							"format": "int32"
						},
						"out_of_order": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			}
		},
		"Host": {
			"type": "object",
			"properties": {
				"localHost": {
					"type": "boolean"
				},
				"ifid": {
					"type": "integer",
					"format": "int32"
				},
				"mac_address": {
					"type": "string"
				},
				"symbolic_name": {
					"type": "string"
				},
				"seen.first": {
					"type": "integer",
					"format": "int32"
				},
				"seen.last": {
					"type": "integer",
					"format": "int32"
					},
				"flows.as_client": {
					"type": "integer",
					"format": "int32"
				},
				"flows.as_server": {
					"type": "integer",
					"format": "int32"
				},
				"throughput_pps": {
					"type": "number"
				},
				"throughput_bps": {
					"type": "number"
				},
				"os": {
					"type": "string"
				},
				"systemHost": {
					"type": "boolean"
				},
				"throughput_trend_pps": {
					"type": "string"
				},
				"throughput_trend_bps": {
					"type": "string"
				},
				"total_activity_time": {
					"type": "integer",
					"format": "int32"
				},
				"num_alerts": {
					"type": "integer",
					"format": "int32"
				},
				"is_blacklisted": {
					"type": "boolean"
				},
				"asn": {
					"type": "integer",
					"format": "int32"
				},
				"rcvd": {
					"type": "object",
					"properties": {
						"packets": {
							"type": "integer",
							"format": "int32"
						},
						"bytes": {
							"type": "integer",
							"format": "int32"
						}
					}
				},
				"sent": {
					"type": "object",
					"properties": {
						"packets": {
							"type": "integer",
							"format": "int32"
						},
						"bytes": {
							"type": "integer",
							"format": "int32"
						}
					}
				},
				"ip": {
					"type": "object",
					"properties": {
						"localHost": {
							"type": "boolean"
						},
						"ip": {
							"type": "string"
						},
						"ipVersion": {
							"type": "integer",
							"format": "int32"
						}
					}
				}
			}
		},
		"Alert": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"entity": {
						"type": "string"
					},
					"msg": {
						"type": "string"
					},
					"duration": {
						"type": "string"
					},
					"date": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"entity_val": {
						"type": "string"
					},
					"severity": {
						"type": "string"
					}
				}
			}
		}
	}
}
